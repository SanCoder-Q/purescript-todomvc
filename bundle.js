(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function Alt($less$bar$greater, __superclass_Prelude$dotFunctor_0) {
    this["<|>"] = $less$bar$greater;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
};
var $less$bar$greater = function (dict) {
    return dict["<|>"];
};
module.exports = {
    "<|>": $less$bar$greater, 
    Alt: Alt
};

},{"Prelude":35}],2:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Control_Lazy = require("Control.Lazy");
var Control_Alt = require("Control.Alt");
function Alternative(__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
    this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
    this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
};
var some = function (__dict_Alternative_0) {
    return function (__dict_Lazy1_1) {
        return function (v) {
            return Prelude["<*>"]((__dict_Alternative_0["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((__dict_Alternative_0["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(v))(Control_Lazy.defer1(__dict_Lazy1_1)(function (_) {
                return many(__dict_Alternative_0)(__dict_Lazy1_1)(v);
            }));
        };
    };
};
var many = function (__dict_Alternative_2) {
    return function (__dict_Lazy1_3) {
        return function (v) {
            return Control_Alt["<|>"]((__dict_Alternative_2["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(__dict_Alternative_2)(__dict_Lazy1_3)(v))(Prelude.pure(__dict_Alternative_2["__superclass_Prelude.Applicative_0"]())([  ]));
        };
    };
};
module.exports = {
    Alternative: Alternative, 
    many: many, 
    some: some
};

},{"Control.Alt":1,"Control.Lazy":6,"Prelude":35}],3:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var $less$times = function (__dict_Apply_0) {
    return function (a) {
        return function (b) {
            return Prelude["<*>"](__dict_Apply_0)(Prelude["<$>"](__dict_Apply_0["__superclass_Prelude.Functor_0"]())(Prelude["const"])(a))(b);
        };
    };
};
var $times$greater = function (__dict_Apply_1) {
    return function (a) {
        return function (b) {
            return Prelude["<*>"](__dict_Apply_1)(Prelude["<$>"](__dict_Apply_1["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryArr)))(a))(b);
        };
    };
};
var lift5 = function (__dict_Apply_2) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return Prelude["<*>"](__dict_Apply_2)(Prelude["<*>"](__dict_Apply_2)(Prelude["<*>"](__dict_Apply_2)(Prelude["<*>"](__dict_Apply_2)(Prelude["<$>"](__dict_Apply_2["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d))(e);
                        };
                    };
                };
            };
        };
    };
};
var lift4 = function (__dict_Apply_3) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return Prelude["<*>"](__dict_Apply_3)(Prelude["<*>"](__dict_Apply_3)(Prelude["<*>"](__dict_Apply_3)(Prelude["<$>"](__dict_Apply_3["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d);
                    };
                };
            };
        };
    };
};
var lift3 = function (__dict_Apply_4) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return Prelude["<*>"](__dict_Apply_4)(Prelude["<*>"](__dict_Apply_4)(Prelude["<$>"](__dict_Apply_4["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c);
                };
            };
        };
    };
};
var lift2 = function (__dict_Apply_5) {
    return function (f) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_5)(Prelude["<$>"](__dict_Apply_5["__superclass_Prelude.Functor_0"]())(f)(a))(b);
            };
        };
    };
};
var forever = function (__dict_Apply_6) {
    return function (a) {
        return $times$greater(__dict_Apply_6)(a)(forever(__dict_Apply_6)(a));
    };
};
module.exports = {
    "*>": $times$greater, 
    "<*": $less$times, 
    forever: forever, 
    lift2: lift2, 
    lift3: lift3, 
    lift4: lift4, 
    lift5: lift5
};

},{"Prelude":35}],4:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function Comonad(__superclass_Control$dotExtend$dotExtend_0, extract) {
    this["__superclass_Control.Extend.Extend_0"] = __superclass_Control$dotExtend$dotExtend_0;
    this.extract = extract;
};
var extract = function (dict) {
    return dict.extract;
};
module.exports = {
    Comonad: Comonad, 
    extract: extract
};

},{"Prelude":35}],5:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function Extend($less$less$eq, __superclass_Prelude$dotFunctor_0) {
    this["<<="] = $less$less$eq;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
};
var $less$less$eq = function (dict) {
    return dict["<<="];
};
var $eq$less$eq = function (__dict_Extend_0) {
    return function (f) {
        return function (g) {
            return function (w) {
                return f($less$less$eq(__dict_Extend_0)(g)(w));
            };
        };
    };
};
var $eq$greater$eq = function (__dict_Extend_1) {
    return function (f) {
        return function (g) {
            return function (w) {
                return g($less$less$eq(__dict_Extend_1)(f)(w));
            };
        };
    };
};
var $eq$greater$greater = function (__dict_Extend_2) {
    return function (w) {
        return function (f) {
            return $less$less$eq(__dict_Extend_2)(f)(w);
        };
    };
};
var extendArr = function (__dict_Semigroup_3) {
    return new Extend(function (f) {
        return function (g) {
            return function (w) {
                return f(function (w$prime) {
                    return g(Prelude["<>"](__dict_Semigroup_3)(w)(w$prime));
                });
            };
        };
    }, function () {
        return Prelude.functorArr;
    });
};
var duplicate = function (__dict_Extend_4) {
    return function (w) {
        return $less$less$eq(__dict_Extend_4)(Prelude.id(Prelude.categoryArr))(w);
    };
};
module.exports = {
    "<<=": $less$less$eq, 
    "=<=": $eq$less$eq, 
    "=>=": $eq$greater$eq, 
    "=>>": $eq$greater$greater, 
    Extend: Extend, 
    duplicate: duplicate, 
    extendArr: extendArr
};

},{"Prelude":35}],6:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function Lazy(defer) {
    this.defer = defer;
};
function Lazy1(defer1) {
    this.defer1 = defer1;
};
function Lazy2(defer2) {
    this.defer2 = defer2;
};
var defer2 = function (dict) {
    return dict.defer2;
};
var fix2 = function (__dict_Lazy2_0) {
    return function (f) {
        return defer2(__dict_Lazy2_0)(function (_) {
            return f(fix2(__dict_Lazy2_0)(f));
        });
    };
};
var defer1 = function (dict) {
    return dict.defer1;
};
var fix1 = function (__dict_Lazy1_1) {
    return function (f) {
        return defer1(__dict_Lazy1_1)(function (_) {
            return f(fix1(__dict_Lazy1_1)(f));
        });
    };
};
var defer = function (dict) {
    return dict.defer;
};
var fix = function (__dict_Lazy_2) {
    return function (f) {
        return defer(__dict_Lazy_2)(function (_) {
            return f(fix(__dict_Lazy_2)(f));
        });
    };
};
module.exports = {
    Lazy: Lazy, 
    Lazy1: Lazy1, 
    Lazy2: Lazy2, 
    defer: defer, 
    defer1: defer1, 
    defer2: defer2, 
    fix: fix, 
    fix1: fix1, 
    fix2: fix2
};

},{"Prelude":35}],7:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function returnE(a) {  return function() {    return a;  };};
function bindE(a) {  return function(f) {    return function() {      return f(a())();    };  };};
function runPure(f) {  return f();};
function untilE(f) {  return function() {    while (!f());    return {};  };};
function whileE(f) {  return function(a) {    return function() {      while (f()) {        a();      }      return {};    };  };};
function forE(lo) {  return function(hi) {    return function(f) {      return function() {        for (var i = lo; i < hi; i++) {          f(i)();        }      };    };  };};
function foreachE(as) {  return function(f) {    return function() {      for (var i = 0; i < as.length; i++) {        f(as[i])();      }    };  };};
var monadEff = new Prelude.Monad(function () {
    return applicativeEff;
}, function () {
    return bindEff;
});
var bindEff = new Prelude.Bind(bindE, function () {
    return applyEff;
});
var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
    return functorEff;
});
var applicativeEff = new Prelude.Applicative(function () {
    return applyEff;
}, returnE);
var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
module.exports = {
    applicativeEff: applicativeEff, 
    applyEff: applyEff, 
    bindE: bindE, 
    bindEff: bindEff, 
    forE: forE, 
    foreachE: foreachE, 
    functorEff: functorEff, 
    monadEff: monadEff, 
    returnE: returnE, 
    runPure: runPure, 
    untilE: untilE, 
    whileE: whileE
};

},{"Prelude":35}],8:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var when = function (__dict_Monad_0) {
    return function (_56) {
        return function (_57) {
            if (_56) {
                return _57;
            };
            if (!_56) {
                return Prelude["return"](__dict_Monad_0)(Prelude.unit);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var unless = function (__dict_Monad_1) {
    return function (_58) {
        return function (_59) {
            if (!_58) {
                return _59;
            };
            if (_58) {
                return Prelude["return"](__dict_Monad_1)(Prelude.unit);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var replicateM = function (__dict_Monad_2) {
    return function (_51) {
        return function (_52) {
            if (_51 === 0) {
                return Prelude["return"](__dict_Monad_2)([  ]);
            };
            return Prelude[">>="](__dict_Monad_2["__superclass_Prelude.Bind_1"]())(_52)(function (_7) {
                return Prelude[">>="](__dict_Monad_2["__superclass_Prelude.Bind_1"]())(replicateM(__dict_Monad_2)(_51 - 1)(_52))(function (_6) {
                    return Prelude["return"](__dict_Monad_2)(Prelude[":"](_7)(_6));
                });
            });
        };
    };
};
var foldM = function (__dict_Monad_3) {
    return function (_53) {
        return function (_54) {
            return function (_55) {
                if (_55.length === 0) {
                    return Prelude["return"](__dict_Monad_3)(_54);
                };
                if (_55.length >= 1) {
                    var _334 = _55.slice(1);
                    return Prelude[">>="](__dict_Monad_3["__superclass_Prelude.Bind_1"]())(_53(_54)(_55[0]))(function (a$prime) {
                        return foldM(__dict_Monad_3)(_53)(a$prime)(_334);
                    });
                };
                throw new Error("Failed pattern match");
            };
        };
    };
};
module.exports = {
    foldM: foldM, 
    replicateM: replicateM, 
    unless: unless, 
    when: when
};

},{"Prelude":35}],9:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Control_Plus = require("Control.Plus");
function MonadPlus(__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Prelude$dotMonad_0) {
    this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
    this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
};
var guard = function (__dict_MonadPlus_0) {
    return function (_60) {
        if (_60) {
            return Prelude["return"](__dict_MonadPlus_0["__superclass_Prelude.Monad_0"]())(Prelude.unit);
        };
        if (!_60) {
            return Control_Plus.empty((__dict_MonadPlus_0["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
        };
        throw new Error("Failed pattern match");
    };
};
module.exports = {
    MonadPlus: MonadPlus, 
    guard: guard
};

},{"Control.Plus":10,"Prelude":35}],10:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function Plus(__superclass_Control$dotAlt$dotAlt_0, empty) {
    this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
    this.empty = empty;
};
var empty = function (dict) {
    return dict.empty;
};
module.exports = {
    Plus: Plus, 
    empty: empty
};

},{"Prelude":35}],11:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");
var Prelude_Unsafe = require("Prelude.Unsafe");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
function snoc(l) {  return function (e) {    var l1 = l.slice();    l1.push(e);     return l1;  };};
function length (xs) {  return xs.length;};
function findIndex (f) {  return function (arr) {    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
function findLastIndex (f) {  return function (arr) {    for (var i = arr.length - 1; i >= 0; i--) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
function append (l1) {  return function (l2) {    return l1.concat(l2);  };};
function concat (xss) {  var result = [];  for (var i = 0, l = xss.length; i < l; i++) {    result.push.apply(result, xss[i]);  }  return result;};
function reverse (l) {  return l.slice().reverse();};
function drop (n) {  return function (l) {    return l.slice(n);  };};
function slice (s) {  return function (e) {    return function (l) {      return l.slice(s, e);    };  };};
function insertAt (index) {  return function (a) {    return function (l) {      var l1 = l.slice();      l1.splice(index, 0, a);      return l1;    };   };};
function deleteAt (index) {  return function (n) {    return function (l) {      var l1 = l.slice();      l1.splice(index, n);      return l1;    };   };};
function updateAt (index) {  return function (a) {    return function (l) {      var i = ~~index;      if (i < 0 || i >= l.length) return l;      var l1 = l.slice();      l1[i] = a;      return l1;    };   };};
function concatMap (f) {  return function (arr) {    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      Array.prototype.push.apply(result, f(arr[i]));    }    return result;  };};
function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
function filter (f) {  return function (arr) {    var n = 0;    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        result[n++] = arr[i];      }    }    return result;  };};
function range (start) {  return function (end) {    var i = ~~start, e = ~~end;    var step = i > e ? -1 : 1;    var result = [i], n = 1;    while (i !== e) {      i += step;      result[n++] = i;    }    return result;  };};
function zipWith (f) {  return function (xs) {    return function (ys) {      var l = xs.length < ys.length ? xs.length : ys.length;      var result = new Array(l);      for (var i = 0; i < l; i++) {        result[i] = f(xs[i])(ys[i]);      }      return result;    };  };};
function sortJS (f) {  return function (l) {    return l.slice().sort(function (x, y) {      return f(x)(y);    });  };};
var $dot$dot = range;
var $bang$bang = function (xs) {
    return function (n) {
        var isInt = function (n_1) {
            return n_1 !== ~~n_1;
        };
        return n < 0 || (n >= length(xs) || isInt(n)) ? Data_Maybe.Nothing.value : new Data_Maybe.Just(xs[n]);
    };
};
var take = function (n) {
    return slice(0)(n);
};
var tail = function (_97) {
    if (_97.length >= 1) {
        var _402 = _97.slice(1);
        return new Data_Maybe.Just(_402);
    };
    return Data_Maybe.Nothing.value;
};
var span = (function () {
    var go = function (__copy__113) {
        return function (__copy__114) {
            return function (__copy__115) {
                var _113 = __copy__113;
                var _114 = __copy__114;
                var _115 = __copy__115;
                tco: while (true) {
                    if (_115.length >= 1) {
                        var _407 = _115.slice(1);
                        if (_114(_115[0])) {
                            var __tco__113 = Prelude[":"](_115[0])(_113);
                            var __tco__114 = _114;
                            _113 = __tco__113;
                            _114 = __tco__114;
                            _115 = _407;
                            continue tco;
                        };
                    };
                    return {
                        init: reverse(_113), 
                        rest: _115
                    };
                };
            };
        };
    };
    return go([  ]);
})();
var sortBy = function (comp) {
    return function (xs) {
        var comp$prime = function (x) {
            return function (y) {
                var _408 = comp(x)(y);
                if (_408 instanceof Prelude.GT) {
                    return 1;
                };
                if (_408 instanceof Prelude.EQ) {
                    return 0;
                };
                if (_408 instanceof Prelude.LT) {
                    return -1;
                };
                throw new Error("Failed pattern match");
            };
        };
        return sortJS(comp$prime)(xs);
    };
};
var sort = function (__dict_Ord_0) {
    return function (xs) {
        return sortBy(Prelude.compare(__dict_Ord_0))(xs);
    };
};
var singleton = function (a) {
    return [ a ];
};
var semigroupArray = new Prelude.Semigroup(append);
var $$null = function (_99) {
    if (_99.length === 0) {
        return true;
    };
    return false;
};
var nubBy = function (_106) {
    return function (_107) {
        if (_107.length === 0) {
            return [  ];
        };
        if (_107.length >= 1) {
            var _413 = _107.slice(1);
            return Prelude[":"](_107[0])(nubBy(_106)(filter(function (y) {
                return !_106(_107[0])(y);
            })(_413)));
        };
        throw new Error("Failed pattern match");
    };
};
var nub = function (__dict_Eq_1) {
    return nubBy(Prelude["=="](__dict_Eq_1));
};
var mapMaybe = function (f) {
    return concatMap(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.maybe([  ])(singleton))(f));
};
var last = function (__copy__96) {
    var _96 = __copy__96;
    tco: while (true) {
        if (_96.length >= 1) {
            var _416 = _96.slice(1);
            if (_416.length === 0) {
                return new Data_Maybe.Just(_96[0]);
            };
        };
        if (_96.length >= 1) {
            var _418 = _96.slice(1);
            _96 = _418;
            continue tco;
        };
        return Data_Maybe.Nothing.value;
    };
};
var intersectBy = function (_103) {
    return function (_104) {
        return function (_105) {
            if (_104.length === 0) {
                return [  ];
            };
            if (_105.length === 0) {
                return [  ];
            };
            var el = function (x) {
                return findIndex(_103(x))(_105) >= 0;
            };
            return filter(el)(_104);
        };
    };
};
var intersect = function (__dict_Eq_2) {
    return intersectBy(Prelude["=="](__dict_Eq_2));
};
var init = function (_98) {
    if (_98.length === 0) {
        return Data_Maybe.Nothing.value;
    };
    return new Data_Maybe.Just(slice(0)(length(_98) - 1)(_98));
};
var head = function (_95) {
    if (_95.length >= 1) {
        var _425 = _95.slice(1);
        return new Data_Maybe.Just(_95[0]);
    };
    return Data_Maybe.Nothing.value;
};
var groupBy = (function () {
    var go = function (__copy__110) {
        return function (__copy__111) {
            return function (__copy__112) {
                var _110 = __copy__110;
                var _111 = __copy__111;
                var _112 = __copy__112;
                tco: while (true) {
                    if (_112.length === 0) {
                        return reverse(_110);
                    };
                    if (_112.length >= 1) {
                        var _430 = _112.slice(1);
                        var sp = span(_111(_112[0]))(_430);
                        var __tco__110 = Prelude[":"](Prelude[":"](_112[0])(sp.init))(_110);
                        var __tco__111 = _111;
                        _110 = __tco__110;
                        _111 = __tco__111;
                        _112 = sp.rest;
                        continue tco;
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    return go([  ]);
})();
var group = function (__dict_Eq_3) {
    return function (xs) {
        return groupBy(Prelude["=="](__dict_Eq_3))(xs);
    };
};
var group$prime = function (__dict_Ord_4) {
    return Prelude["<<<"](Prelude.semigroupoidArr)(group(__dict_Ord_4["__superclass_Prelude.Eq_0"]()))(sort(__dict_Ord_4));
};
var functorArray = new Prelude.Functor(map);
var elemLastIndex = function (__dict_Eq_5) {
    return function (x) {
        return findLastIndex(Prelude["=="](__dict_Eq_5)(x));
    };
};
var elemIndex = function (__dict_Eq_6) {
    return function (x) {
        return findIndex(Prelude["=="](__dict_Eq_6)(x));
    };
};
var deleteBy = function (_100) {
    return function (_101) {
        return function (_102) {
            if (_102.length === 0) {
                return [  ];
            };
            var _434 = findIndex(_100(_101))(_102);
            if (_434 < 0) {
                return _102;
            };
            return deleteAt(_434)(1)(_102);
        };
    };
};
var $$delete = function (__dict_Eq_7) {
    return deleteBy(Prelude["=="](__dict_Eq_7));
};
var $bslash$bslash = function (__dict_Eq_8) {
    return function (xs) {
        return function (ys) {
            var go = function (__copy__108) {
                return function (__copy__109) {
                    var _108 = __copy__108;
                    var _109 = __copy__109;
                    tco: while (true) {
                        if (_109.length === 0) {
                            return _108;
                        };
                        if (_108.length === 0) {
                            return [  ];
                        };
                        if (_109.length >= 1) {
                            var _438 = _109.slice(1);
                            var __tco__108 = $$delete(__dict_Eq_8)(_109[0])(_108);
                            _108 = __tco__108;
                            _109 = _438;
                            continue tco;
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
            return go(xs)(ys);
        };
    };
};
var catMaybes = concatMap(Data_Maybe.maybe([  ])(singleton));
var monadArray = new Prelude.Monad(function () {
    return applicativeArray;
}, function () {
    return bindArray;
});
var bindArray = new Prelude.Bind(Prelude.flip(concatMap), function () {
    return applyArray;
});
var applyArray = new Prelude.Apply(Prelude.ap(monadArray), function () {
    return functorArray;
});
var applicativeArray = new Prelude.Applicative(function () {
    return applyArray;
}, singleton);
var altArray = new Control_Alt.Alt(append, function () {
    return functorArray;
});
var plusArray = new Control_Plus.Plus(function () {
    return altArray;
}, [  ]);
var alternativeArray = new Control_Alternative.Alternative(function () {
    return plusArray;
}, function () {
    return applicativeArray;
});
var monadPlusArray = new Control_MonadPlus.MonadPlus(function () {
    return alternativeArray;
}, function () {
    return monadArray;
});
module.exports = {
    "!!": $bang$bang, 
    "..": $dot$dot, 
    "\\\\": $bslash$bslash, 
    altArray: altArray, 
    alternativeArray: alternativeArray, 
    append: append, 
    applicativeArray: applicativeArray, 
    applyArray: applyArray, 
    bindArray: bindArray, 
    catMaybes: catMaybes, 
    concat: concat, 
    concatMap: concatMap, 
    "delete": $$delete, 
    deleteAt: deleteAt, 
    deleteBy: deleteBy, 
    drop: drop, 
    elemIndex: elemIndex, 
    elemLastIndex: elemLastIndex, 
    filter: filter, 
    findIndex: findIndex, 
    findLastIndex: findLastIndex, 
    functorArray: functorArray, 
    group: group, 
    "group'": group$prime, 
    groupBy: groupBy, 
    head: head, 
    init: init, 
    insertAt: insertAt, 
    intersect: intersect, 
    intersectBy: intersectBy, 
    last: last, 
    length: length, 
    map: map, 
    mapMaybe: mapMaybe, 
    monadArray: monadArray, 
    monadPlusArray: monadPlusArray, 
    nub: nub, 
    nubBy: nubBy, 
    "null": $$null, 
    plusArray: plusArray, 
    range: range, 
    reverse: reverse, 
    semigroupArray: semigroupArray, 
    singleton: singleton, 
    snoc: snoc, 
    sort: sort, 
    sortBy: sortBy, 
    span: span, 
    tail: tail, 
    take: take, 
    updateAt: updateAt, 
    zipWith: zipWith
};

},{"Control.Alt":1,"Control.Alternative":2,"Control.MonadPlus":9,"Control.Plus":10,"Data.Maybe":25,"Prelude":35,"Prelude.Unsafe":34}],12:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Char = {
    create: function (value) {
        return value;
    }
};

    function toCharCode(c) {
      return c.charCodeAt(0);
    }
    ;

    function fromCharCode(c) {
      return String.fromCharCode(c);
    }
    ;
var showChar = new Prelude.Show(function (_47) {
    return "Char " + Prelude.show(Prelude.showString)(_47);
});
var eqChar = new Prelude.Eq(function (a) {
    return function (b) {
        return !Prelude["=="](eqChar)(a)(b);
    };
}, function (_43) {
    return function (_44) {
        return _43 === _44;
    };
});
var ordChar = new Prelude.Ord(function () {
    return eqChar;
}, function (_45) {
    return function (_46) {
        return Prelude.compare(Prelude.ordString)(_45)(_46);
    };
});
var charString = function (_42) {
    return _42;
};
module.exports = {
    charString: charString, 
    eqChar: eqChar, 
    fromCharCode: fromCharCode, 
    ordChar: ordChar, 
    showChar: showChar, 
    toCharCode: toCharCode
};

},{"Prelude":35}],13:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
function Left(value0) {
    this.value0 = value0;
};
Left.create = function (value0) {
    return new Left(value0);
};
function Right(value0) {
    this.value0 = value0;
};
Right.create = function (value0) {
    return new Right(value0);
};
var showEither = function (__dict_Show_0) {
    return function (__dict_Show_1) {
        return new Prelude.Show(function (_70) {
            if (_70 instanceof Left) {
                return "Left (" + (Prelude.show(__dict_Show_0)(_70.value0) + ")");
            };
            if (_70 instanceof Right) {
                return "Right (" + (Prelude.show(__dict_Show_1)(_70.value0) + ")");
            };
            throw new Error("Failed pattern match");
        });
    };
};
var functorEither = new Prelude.Functor(function (_64) {
    return function (_65) {
        if (_65 instanceof Left) {
            return new Left(_65.value0);
        };
        if (_65 instanceof Right) {
            return new Right(_64(_65.value0));
        };
        throw new Error("Failed pattern match");
    };
});
var eqEither = function (__dict_Eq_4) {
    return function (__dict_Eq_5) {
        return new Prelude.Eq(function (a) {
            return function (b) {
                return !Prelude["=="](eqEither(__dict_Eq_4)(__dict_Eq_5))(a)(b);
            };
        }, function (_71) {
            return function (_72) {
                if (_71 instanceof Left && _72 instanceof Left) {
                    return Prelude["=="](__dict_Eq_4)(_71.value0)(_72.value0);
                };
                if (_71 instanceof Right && _72 instanceof Right) {
                    return Prelude["=="](__dict_Eq_5)(_71.value0)(_72.value0);
                };
                return false;
            };
        });
    };
};
var ordEither = function (__dict_Ord_2) {
    return function (__dict_Ord_3) {
        return new Prelude.Ord(function () {
            return eqEither(__dict_Ord_2["__superclass_Prelude.Eq_0"]())(__dict_Ord_3["__superclass_Prelude.Eq_0"]());
        }, function (_73) {
            return function (_74) {
                if (_73 instanceof Left && _74 instanceof Left) {
                    return Prelude.compare(__dict_Ord_2)(_73.value0)(_74.value0);
                };
                if (_73 instanceof Right && _74 instanceof Right) {
                    return Prelude.compare(__dict_Ord_3)(_73.value0)(_74.value0);
                };
                if (_73 instanceof Left) {
                    return Prelude.LT.value;
                };
                if (_74 instanceof Left) {
                    return Prelude.GT.value;
                };
                throw new Error("Failed pattern match");
            };
        });
    };
};
var either = function (_61) {
    return function (_62) {
        return function (_63) {
            if (_63 instanceof Left) {
                return _61(_63.value0);
            };
            if (_63 instanceof Right) {
                return _62(_63.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var isLeft = either(Prelude["const"](true))(Prelude["const"](false));
var isRight = either(Prelude["const"](false))(Prelude["const"](true));
var applyEither = new Prelude.Apply(function (_66) {
    return function (_67) {
        if (_66 instanceof Left) {
            return new Left(_66.value0);
        };
        if (_66 instanceof Right) {
            return Prelude["<$>"](functorEither)(_66.value0)(_67);
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return functorEither;
});
var bindEither = new Prelude.Bind(either(function (e) {
    return function (_) {
        return new Left(e);
    };
})(function (a) {
    return function (f) {
        return f(a);
    };
}), function () {
    return applyEither;
});
var applicativeEither = new Prelude.Applicative(function () {
    return applyEither;
}, Right.create);
var monadEither = new Prelude.Monad(function () {
    return applicativeEither;
}, function () {
    return bindEither;
});
var altEither = new Control_Alt.Alt(function (_68) {
    return function (_69) {
        if (_68 instanceof Left) {
            return _69;
        };
        return _68;
    };
}, function () {
    return functorEither;
});
module.exports = {
    Left: Left, 
    Right: Right, 
    altEither: altEither, 
    applicativeEither: applicativeEither, 
    applyEither: applyEither, 
    bindEither: bindEither, 
    either: either, 
    eqEither: eqEither, 
    functorEither: functorEither, 
    isLeft: isLeft, 
    isRight: isRight, 
    monadEither: monadEither, 
    ordEither: ordEither, 
    showEither: showEither
};

},{"Control.Alt":1,"Prelude":35}],14:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Data_Monoid = require("Data.Monoid");
var Prelude = require("Prelude");
var Control_Apply = require("Control.Apply");
var Data_Monoid_First = require("Data.Monoid.First");
var Data_Tuple = require("Data.Tuple");
var Data_Maybe = require("Data.Maybe");
var Data_Either = require("Data.Either");
function Foldable(foldMap, foldl, foldr) {
    this.foldMap = foldMap;
    this.foldl = foldl;
    this.foldr = foldr;
};

  function foldrArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = xs.length - 1; i >= 0; --i) {
          acc = f(xs[i])(acc);
        }
        return acc;
      }
    }
  };

  function foldlArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = 0, len = xs.length; i < len; ++i) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      }
    }
  };
var foldr = function (dict) {
    return dict.foldr;
};
var traverse_ = function (__dict_Applicative_0) {
    return function (__dict_Foldable_1) {
        return function (f) {
            return foldr(__dict_Foldable_1)(Prelude["<<<"](Prelude.semigroupoidArr)(Control_Apply["*>"](__dict_Applicative_0["__superclass_Prelude.Apply_0"]()))(f))(Prelude.pure(__dict_Applicative_0)(Prelude.unit));
        };
    };
};
var for_ = function (__dict_Applicative_2) {
    return function (__dict_Foldable_3) {
        return Prelude.flip(traverse_(__dict_Applicative_2)(__dict_Foldable_3));
    };
};
var sequence_ = function (__dict_Applicative_4) {
    return function (__dict_Foldable_5) {
        return traverse_(__dict_Applicative_4)(__dict_Foldable_5)(Prelude.id(Prelude.categoryArr));
    };
};
var foldl = function (dict) {
    return dict.foldl;
};
var intercalate = function (__dict_Foldable_6) {
    return function (__dict_Monoid_7) {
        return function (sep) {
            return function (xs) {
                var go = function (_26) {
                    return function (_27) {
                        if (_26.init) {
                            return {
                                init: false, 
                                acc: _27
                            };
                        };
                        return {
                            init: false, 
                            acc: Prelude["<>"](__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]())(_26.acc)(Prelude["<>"](__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]())(sep)(_27))
                        };
                    };
                };
                return (foldl(__dict_Foldable_6)(go)({
                    init: true, 
                    acc: Data_Monoid.mempty(__dict_Monoid_7)
                })(xs)).acc;
            };
        };
    };
};
var mconcat = function (__dict_Foldable_8) {
    return function (__dict_Monoid_9) {
        return foldl(__dict_Foldable_8)(Prelude["<>"](__dict_Monoid_9["__superclass_Prelude.Semigroup_0"]()))(Data_Monoid.mempty(__dict_Monoid_9));
    };
};
var or = function (__dict_Foldable_10) {
    return foldl(__dict_Foldable_10)(Prelude["||"](Prelude.boolLikeBoolean))(false);
};
var product = function (__dict_Foldable_11) {
    return foldl(__dict_Foldable_11)(Prelude["*"](Prelude.numNumber))(1);
};
var sum = function (__dict_Foldable_12) {
    return foldl(__dict_Foldable_12)(Prelude["+"](Prelude.numNumber))(0);
};
var foldableTuple = new Foldable(function (__dict_Monoid_13) {
    return function (_24) {
        return function (_25) {
            return _24(_25.value1);
        };
    };
}, function (_21) {
    return function (_22) {
        return function (_23) {
            return _21(_22)(_23.value1);
        };
    };
}, function (_18) {
    return function (_19) {
        return function (_20) {
            return _18(_20.value1)(_19);
        };
    };
});
var foldableMaybe = new Foldable(function (__dict_Monoid_14) {
    return function (_16) {
        return function (_17) {
            if (_17 instanceof Data_Maybe.Nothing) {
                return Data_Monoid.mempty(__dict_Monoid_14);
            };
            if (_17 instanceof Data_Maybe.Just) {
                return _16(_17.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (_13) {
    return function (_14) {
        return function (_15) {
            if (_15 instanceof Data_Maybe.Nothing) {
                return _14;
            };
            if (_15 instanceof Data_Maybe.Just) {
                return _13(_14)(_15.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (_10) {
    return function (_11) {
        return function (_12) {
            if (_12 instanceof Data_Maybe.Nothing) {
                return _11;
            };
            if (_12 instanceof Data_Maybe.Just) {
                return _10(_12.value0)(_11);
            };
            throw new Error("Failed pattern match");
        };
    };
});
var foldableEither = new Foldable(function (__dict_Monoid_15) {
    return function (_8) {
        return function (_9) {
            if (_9 instanceof Data_Either.Left) {
                return Data_Monoid.mempty(__dict_Monoid_15);
            };
            if (_9 instanceof Data_Either.Right) {
                return _8(_9.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (_5) {
    return function (_6) {
        return function (_7) {
            if (_7 instanceof Data_Either.Left) {
                return _6;
            };
            if (_7 instanceof Data_Either.Right) {
                return _5(_6)(_7.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (_2) {
    return function (_3) {
        return function (_4) {
            if (_4 instanceof Data_Either.Left) {
                return _3;
            };
            if (_4 instanceof Data_Either.Right) {
                return _2(_4.value0)(_3);
            };
            throw new Error("Failed pattern match");
        };
    };
});
var foldableArray = new Foldable(function (__dict_Monoid_16) {
    return function (f) {
        return function (xs) {
            return foldr(foldableArray)(function (x) {
                return function (acc) {
                    return Prelude["<>"](__dict_Monoid_16["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                };
            })(Data_Monoid.mempty(__dict_Monoid_16))(xs);
        };
    };
}, function (f) {
    return function (z) {
        return function (xs) {
            return foldlArray(f)(z)(xs);
        };
    };
}, function (f) {
    return function (z) {
        return function (xs) {
            return foldrArray(f)(z)(xs);
        };
    };
});
var foldMap = function (dict) {
    return dict.foldMap;
};
var lookup = function (__dict_Eq_17) {
    return function (__dict_Foldable_18) {
        return function (a) {
            return function (f) {
                return Data_Monoid_First.runFirst(foldMap(__dict_Foldable_18)(Data_Monoid_First.monoidFirst)(function (_1) {
                    return Prelude["=="](__dict_Eq_17)(a)(_1.value0) ? new Data_Maybe.Just(_1.value1) : Data_Maybe.Nothing.value;
                })(f));
            };
        };
    };
};
var fold = function (__dict_Foldable_19) {
    return function (__dict_Monoid_20) {
        return foldMap(__dict_Foldable_19)(__dict_Monoid_20)(Prelude.id(Prelude.categoryArr));
    };
};
var find = function (__dict_Foldable_21) {
    return function (p) {
        return function (f) {
            var _91 = foldMap(__dict_Foldable_21)(Data_Monoid.monoidArray)(function (x) {
                return p(x) ? [ x ] : [  ];
            })(f);
            if (_91.length >= 1) {
                var _93 = _91.slice(1);
                return new Data_Maybe.Just(_91[0]);
            };
            if (_91.length === 0) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    };
};
var any = function (__dict_Foldable_22) {
    return function (p) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(or(foldableArray))(foldMap(__dict_Foldable_22)(Data_Monoid.monoidArray)(function (x) {
            return [ p(x) ];
        }));
    };
};
var elem = function (__dict_Eq_23) {
    return function (__dict_Foldable_24) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(any(__dict_Foldable_24))(Prelude["=="](__dict_Eq_23));
    };
};
var notElem = function (__dict_Eq_25) {
    return function (__dict_Foldable_26) {
        return function (x) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(Prelude.not(Prelude.boolLikeBoolean))(elem(__dict_Eq_25)(__dict_Foldable_26)(x));
        };
    };
};
var and = function (__dict_Foldable_27) {
    return foldl(__dict_Foldable_27)(Prelude["&&"](Prelude.boolLikeBoolean))(true);
};
var all = function (__dict_Foldable_28) {
    return function (p) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(and(foldableArray))(foldMap(__dict_Foldable_28)(Data_Monoid.monoidArray)(function (x) {
            return [ p(x) ];
        }));
    };
};
module.exports = {
    Foldable: Foldable, 
    all: all, 
    and: and, 
    any: any, 
    elem: elem, 
    find: find, 
    fold: fold, 
    foldMap: foldMap, 
    foldableArray: foldableArray, 
    foldableEither: foldableEither, 
    foldableMaybe: foldableMaybe, 
    foldableTuple: foldableTuple, 
    foldl: foldl, 
    foldlArray: foldlArray, 
    foldr: foldr, 
    foldrArray: foldrArray, 
    for_: for_, 
    intercalate: intercalate, 
    lookup: lookup, 
    mconcat: mconcat, 
    notElem: notElem, 
    or: or, 
    product: product, 
    sequence_: sequence_, 
    sum: sum, 
    traverse_: traverse_
};

},{"Control.Apply":3,"Data.Either":13,"Data.Maybe":25,"Data.Monoid":27,"Data.Monoid.First":26,"Data.Tuple":30,"Prelude":35}],15:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function mkFn0(fn) {  return function() {    return fn({});  };};
function mkFn1(fn) {  return function(a) {    return fn(a);  };};
function mkFn2(fn) {  return function(a, b) {    return fn(a)(b);  };};
function mkFn3(fn) {  return function(a, b, c) {    return fn(a)(b)(c);  };};
function mkFn4(fn) {  return function(a, b, c, d) {    return fn(a)(b)(c)(d);  };};
function mkFn5(fn) {  return function(a, b, c, d, e) {    return fn(a)(b)(c)(d)(e);  };};
function mkFn6(fn) {  return function(a, b, c, d, e, f) {    return fn(a)(b)(c)(d)(e)(f);  };};
function mkFn7(fn) {  return function(a, b, c, d, e, f, g) {    return fn(a)(b)(c)(d)(e)(f)(g);  };};
function mkFn8(fn) {  return function(a, b, c, d, e, f, g, h) {    return fn(a)(b)(c)(d)(e)(f)(g)(h);  };};
function mkFn9(fn) {  return function(a, b, c, d, e, f, g, h, i) {    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);  };};
function mkFn10(fn) {  return function(a, b, c, d, e, f, g, h, i, j) {    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);  };};
function runFn0(fn) {  return fn();};
function runFn1(fn) {  return function(a) {    return fn(a);  };};
function runFn2(fn) {  return function(a) {    return function(b) {      return fn(a, b);    };  };};
function runFn3(fn) {  return function(a) {    return function(b) {      return function(c) {        return fn(a, b, c);      };    };  };};
function runFn4(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return fn(a, b, c, d);        };      };    };  };};
function runFn5(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return fn(a, b, c, d, e);          };        };      };    };  };};
function runFn6(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return fn(a, b, c, d, e, f);            };          };        };      };    };  };};
function runFn7(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return fn(a, b, c, d, e, f, g);              };            };          };        };      };    };  };};
function runFn8(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return fn(a, b, c, d, e, f, g, h);                };              };            };          };        };      };    };  };};
function runFn9(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return function(i) {                    return fn(a, b, c, d, e, f, g, h, i);                  };                };              };            };          };        };      };    };  };};
function runFn10(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return function(i) {                    return function(j) {                      return fn(a, b, c, d, e, f, g, h, i, j);                    };                  };                };              };            };          };        };      };    };  };};
var on = function (f) {
    return function (g) {
        return function (x) {
            return function (y) {
                return f(g(x))(g(y));
            };
        };
    };
};
module.exports = {
    mkFn0: mkFn0, 
    mkFn1: mkFn1, 
    mkFn10: mkFn10, 
    mkFn2: mkFn2, 
    mkFn3: mkFn3, 
    mkFn4: mkFn4, 
    mkFn5: mkFn5, 
    mkFn6: mkFn6, 
    mkFn7: mkFn7, 
    mkFn8: mkFn8, 
    mkFn9: mkFn9, 
    on: on, 
    runFn0: runFn0, 
    runFn1: runFn1, 
    runFn10: runFn10, 
    runFn2: runFn2, 
    runFn3: runFn3, 
    runFn4: runFn4, 
    runFn5: runFn5, 
    runFn6: runFn6, 
    runFn7: runFn7, 
    runFn8: runFn8, 
    runFn9: runFn9
};

},{"Prelude":35}],16:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Data_Html_Attributes = require("Data.Html.Attributes");
var Prelude = require("Prelude");
var wrap = Data_Html_Attributes.stringAttribute("wrap");
var width = Data_Html_Attributes.numberAttribute("width");
var value = Data_Html_Attributes.stringAttribute("value");
var useMap = Data_Html_Attributes.stringAttribute("useMap");
var type_ = Data_Html_Attributes.stringAttribute("type");
var title = Data_Html_Attributes.stringAttribute("title");
var target = Data_Html_Attributes.stringAttribute("target");
var tabIndex = Data_Html_Attributes.numberAttribute("tabIndex");
var style = Data_Html_Attributes.style;
var step = Data_Html_Attributes.numberAttribute("step");
var start = Data_Html_Attributes.numberAttribute("start");
var srcdoc = Data_Html_Attributes.stringAttribute("srcdoc");
var src = Data_Html_Attributes.stringAttribute("src");
var spellcheck = Data_Html_Attributes.booleanAttribute("spellcheck");
var span = Data_Html_Attributes.numberAttribute("span");
var sizes = Data_Html_Attributes.stringAttribute("sizes");
var size = Data_Html_Attributes.numberAttribute("size");
var shape = Data_Html_Attributes.stringAttribute("shape");
var selected = Data_Html_Attributes.booleanAttribute("selected");
var scoped = Data_Html_Attributes.booleanAttribute("scoped");
var scope = Data_Html_Attributes.stringAttribute("scope");
var sandbox = Data_Html_Attributes.stringAttribute("sandbox");
var rows = Data_Html_Attributes.numberAttribute("rows");
var rowSpan = Data_Html_Attributes.numberAttribute("rowSpan");
var reversed = Data_Html_Attributes.booleanAttribute("reversed");
var required = Data_Html_Attributes.booleanAttribute("required");
var rel = Data_Html_Attributes.stringAttribute("rel");
var readOnly = Data_Html_Attributes.booleanAttribute("readOnly");
var radiogroup = Data_Html_Attributes.stringAttribute("radiogroup");
var preload = Data_Html_Attributes.stringAttribute("preload");
var poster = Data_Html_Attributes.stringAttribute("poster");
var placeholder = Data_Html_Attributes.stringAttribute("placeholder");
var pattern = Data_Html_Attributes.stringAttribute("pattern");
var optimum = Data_Html_Attributes.numberAttribute("optimum");
var open = Data_Html_Attributes.booleanAttribute("open");
var noValidate = Data_Html_Attributes.booleanAttribute("noValidate");
var name = Data_Html_Attributes.stringAttribute("name");
var muted = Data_Html_Attributes.booleanAttribute("muted");
var multiple = Data_Html_Attributes.booleanAttribute("multiple");
var min = Data_Html_Attributes.stringAttribute("min");
var method = Data_Html_Attributes.stringAttribute("method");
var media = Data_Html_Attributes.stringAttribute("media");
var maxLength = Data_Html_Attributes.numberAttribute("maxLength");
var max = Data_Html_Attributes.stringAttribute("max");
var low = Data_Html_Attributes.numberAttribute("high");
var loop = Data_Html_Attributes.booleanAttribute("loop");
var list = Data_Html_Attributes.stringAttribute("list");
var lang = Data_Html_Attributes.stringAttribute("lang");
var label = Data_Html_Attributes.stringAttribute("label");
var kind = Data_Html_Attributes.stringAttribute("kind");
var isMap = Data_Html_Attributes.booleanAttribute("isMap");
var id_ = Data_Html_Attributes.stringAttribute("id");
var icon = Data_Html_Attributes.stringAttribute("icon");
var httpEquiv = Data_Html_Attributes.stringAttribute("httpEquiv");
var hreflang = Data_Html_Attributes.stringAttribute("hreflang");
var href = Data_Html_Attributes.stringAttribute("href");
var high = Data_Html_Attributes.numberAttribute("high");
var hidden = Data_Html_Attributes.booleanAttribute("hidden");
var height = Data_Html_Attributes.numberAttribute("height");
var headers = Data_Html_Attributes.stringAttribute("headers");
var formTarget = Data_Html_Attributes.stringAttribute("formTarget");
var formNoValidate = Data_Html_Attributes.booleanAttribute("formNoValidate");
var formMethod = Data_Html_Attributes.stringAttribute("formMethod");
var formEnctype = Data_Html_Attributes.stringAttribute("formEnctype");
var formAction = Data_Html_Attributes.stringAttribute("formAction");
var form = Data_Html_Attributes.stringAttribute("form");
var $$for = Data_Html_Attributes.stringAttribute("htmlFor");
var enctype = Data_Html_Attributes.stringAttribute("enctype");
var draggable = Data_Html_Attributes.stringAttribute("draggable");
var downloadAs = Data_Html_Attributes.stringAttribute("download");
var download = Data_Html_Attributes.booleanAttribute("download");
var disabled = Data_Html_Attributes.booleanAttribute("disabled");
var dir = Data_Html_Attributes.stringAttribute("dir");
var defer = Data_Html_Attributes.booleanAttribute("defer");
var $$default = Data_Html_Attributes.booleanAttribute("default");
var dateTime = Data_Html_Attributes.stringAttribute("dateTime");
var data_ = Data_Html_Attributes.stringAttribute("data");
var crossOrigin = Data_Html_Attributes.stringAttribute("crossOrigin");
var coords = Data_Html_Attributes.stringAttribute("coords");
var controls = Data_Html_Attributes.booleanAttribute("controls");
var contentEditable = Data_Html_Attributes.booleanAttribute("contentEditable");
var content = Data_Html_Attributes.stringAttribute("content");
var cols = Data_Html_Attributes.numberAttribute("cols");
var colSpan = Data_Html_Attributes.numberAttribute("colSpan");
var class_ = Data_Html_Attributes.stringAttribute("className");
var cite = Data_Html_Attributes.stringAttribute("cite");
var checked = Data_Html_Attributes.booleanAttribute("checked");
var charset = Data_Html_Attributes.stringAttribute("charset");
var autoplay = Data_Html_Attributes.booleanAttribute("autoplay");
var autofocus = Data_Html_Attributes.booleanAttribute("autofocus");
var autocomplete = Data_Html_Attributes.stringAttribute("autocomplete");
var async = Data_Html_Attributes.booleanAttribute("async");
var alt = Data_Html_Attributes.stringAttribute("alt");
var action = Data_Html_Attributes.stringAttribute("action");
var accessKey = Data_Html_Attributes.stringAttribute("accessKey");
var acceptCharset = Data_Html_Attributes.stringAttribute("acceptCharset");
var accept = Data_Html_Attributes.stringAttribute("accept");
var abbr = Data_Html_Attributes.stringAttribute("abbr");
module.exports = {
    abbr: abbr, 
    accept: accept, 
    acceptCharset: acceptCharset, 
    accessKey: accessKey, 
    action: action, 
    alt: alt, 
    async: async, 
    autocomplete: autocomplete, 
    autofocus: autofocus, 
    autoplay: autoplay, 
    charset: charset, 
    checked: checked, 
    cite: cite, 
    class_: class_, 
    colSpan: colSpan, 
    cols: cols, 
    content: content, 
    contentEditable: contentEditable, 
    controls: controls, 
    coords: coords, 
    crossOrigin: crossOrigin, 
    data_: data_, 
    dateTime: dateTime, 
    "default": $$default, 
    defer: defer, 
    dir: dir, 
    disabled: disabled, 
    download: download, 
    downloadAs: downloadAs, 
    draggable: draggable, 
    enctype: enctype, 
    "for": $$for, 
    form: form, 
    formAction: formAction, 
    formEnctype: formEnctype, 
    formMethod: formMethod, 
    formNoValidate: formNoValidate, 
    formTarget: formTarget, 
    headers: headers, 
    height: height, 
    hidden: hidden, 
    high: high, 
    href: href, 
    hreflang: hreflang, 
    httpEquiv: httpEquiv, 
    icon: icon, 
    id_: id_, 
    isMap: isMap, 
    kind: kind, 
    label: label, 
    lang: lang, 
    list: list, 
    loop: loop, 
    low: low, 
    max: max, 
    maxLength: maxLength, 
    media: media, 
    method: method, 
    min: min, 
    multiple: multiple, 
    muted: muted, 
    name: name, 
    noValidate: noValidate, 
    open: open, 
    optimum: optimum, 
    pattern: pattern, 
    placeholder: placeholder, 
    poster: poster, 
    preload: preload, 
    radiogroup: radiogroup, 
    readOnly: readOnly, 
    rel: rel, 
    required: required, 
    reversed: reversed, 
    rowSpan: rowSpan, 
    rows: rows, 
    sandbox: sandbox, 
    scope: scope, 
    scoped: scoped, 
    selected: selected, 
    shape: shape, 
    size: size, 
    sizes: sizes, 
    span: span, 
    spellcheck: spellcheck, 
    src: src, 
    srcdoc: srcdoc, 
    start: start, 
    step: step, 
    style: style, 
    tabIndex: tabIndex, 
    target: target, 
    title: title, 
    type_: type_, 
    useMap: useMap, 
    value: value, 
    width: width, 
    wrap: wrap
};

},{"Data.Html.Attributes":17,"Prelude":35}],17:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Data_Html_Internal_Attributes = require("Data.Html.Internal.Attributes");
var Prelude = require("Prelude");

function mkEvent (fn) {
  return function mkEvHook_callback(ev){
    fn(ev)();
  }
};
var style = function (v) {
    return Data_Html_Internal_Attributes.attribute("style")(Data_Html_Internal_Attributes.unsafeCoerce(v));
};
var stringAttribute = function (n) {
    return function (v) {
        return Data_Html_Internal_Attributes.attribute(n)(Data_Html_Internal_Attributes.unsafeCoerce(v));
    };
};
var on_ = function (ev) {
    return function (fn) {
        return Data_Html_Internal_Attributes.attribute("on" + ev)(mkEvent(fn));
    };
};
var numberAttribute = function (n) {
    return function (v) {
        return Data_Html_Internal_Attributes.attribute(n)(Data_Html_Internal_Attributes.unsafeCoerce(v));
    };
};
var namespace = Data_Html_Internal_Attributes.Namespace.create;
var key = Data_Html_Internal_Attributes.Key.create;
var booleanAttribute = function (n) {
    return function (v) {
        return Data_Html_Internal_Attributes.attribute(n)(Data_Html_Internal_Attributes.unsafeCoerce(v));
    };
};
module.exports = {
    booleanAttribute: booleanAttribute, 
    key: key, 
    namespace: namespace, 
    numberAttribute: numberAttribute, 
    on_: on_, 
    stringAttribute: stringAttribute, 
    style: style
};

},{"Data.Html.Internal.Attributes":21,"Prelude":35}],18:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Data_Html_Elements = require("Data.Html.Elements");
var Prelude = require("Prelude");
var wbr = Data_Html_Elements.vnode("wbr");
var video = Data_Html_Elements.vnode("video");
var $$var = Data_Html_Elements.vnode("var");
var ul = Data_Html_Elements.vnode("ul");
var u = Data_Html_Elements.vnode("u");
var track = Data_Html_Elements.vnode("track");
var tr = Data_Html_Elements.vnode("tr");
var time = Data_Html_Elements.vnode("time");
var thead = Data_Html_Elements.vnode("thead");
var th = Data_Html_Elements.vnode("th");
var tfoot = Data_Html_Elements.vnode("tfoot");
var textarea = Data_Html_Elements.vnode("textarea");
var text = Data_Html_Elements.text;
var td = Data_Html_Elements.vnode("td");
var tbody = Data_Html_Elements.vnode("tbody");
var table = Data_Html_Elements.vnode("table");
var sup = Data_Html_Elements.vnode("sup");
var summary = Data_Html_Elements.vnode("summary");
var sub = Data_Html_Elements.vnode("sub");
var style = Data_Html_Elements.vnode("style");
var strong = Data_Html_Elements.vnode("strong");
var span = Data_Html_Elements.vnode("span");
var source = Data_Html_Elements.vnode("source");
var small = Data_Html_Elements.vnode("small");
var select = Data_Html_Elements.vnode("select");
var section = Data_Html_Elements.vnode("section");
var script = Data_Html_Elements.vnode("script");
var samp = Data_Html_Elements.vnode("samp");
var s = Data_Html_Elements.vnode("s");
var ruby = Data_Html_Elements.vnode("ruby");
var rt = Data_Html_Elements.vnode("rt");
var rp = Data_Html_Elements.vnode("rp");
var q = Data_Html_Elements.vnode("q");
var progress = Data_Html_Elements.vnode("progress");
var pre = Data_Html_Elements.vnode("pre");
var param = Data_Html_Elements.vnode("param");
var p = Data_Html_Elements.vnode("p");
var output = Data_Html_Elements.vnode("output");
var option = Data_Html_Elements.vnode("option");
var optgroup = Data_Html_Elements.vnode("optgroup");
var ol = Data_Html_Elements.vnode("ol");
var object = Data_Html_Elements.vnode("object");
var noscript = Data_Html_Elements.vnode("noscript");
var nav = Data_Html_Elements.vnode("nav");
var meter = Data_Html_Elements.vnode("meter");
var meta = Data_Html_Elements.vnode("meta");
var menuitem = Data_Html_Elements.vnode("menuitem");
var menu = Data_Html_Elements.vnode("menu");
var mark = Data_Html_Elements.vnode("mark");
var map = Data_Html_Elements.vnode("map");
var main = Data_Html_Elements.vnode("main");
var link = Data_Html_Elements.vnode("link");
var li = Data_Html_Elements.vnode("li");
var legend = Data_Html_Elements.vnode("legend");
var label = Data_Html_Elements.vnode("label");
var keygen = Data_Html_Elements.vnode("keygen");
var kbd = Data_Html_Elements.vnode("kbd");
var ins = Data_Html_Elements.vnode("ins");
var input = Data_Html_Elements.vnode("input");
var img = Data_Html_Elements.vnode("img");
var iframe = Data_Html_Elements.vnode("iframe");
var i = Data_Html_Elements.vnode("i");
var hr = Data_Html_Elements.vnode("hr");
var hgroup = Data_Html_Elements.vnode("hgroup");
var header = Data_Html_Elements.vnode("header");
var h6 = Data_Html_Elements.vnode("h6");
var h5 = Data_Html_Elements.vnode("h5");
var h4 = Data_Html_Elements.vnode("h4");
var h3 = Data_Html_Elements.vnode("h3");
var h2 = Data_Html_Elements.vnode("h2");
var h1 = Data_Html_Elements.vnode("h1");
var form = Data_Html_Elements.vnode("form");
var footer = Data_Html_Elements.vnode("footer");
var figure = Data_Html_Elements.vnode("figure");
var figcaption = Data_Html_Elements.vnode("figcaption");
var fieldset = Data_Html_Elements.vnode("fieldset");
var embed = Data_Html_Elements.vnode("embed");
var em = Data_Html_Elements.vnode("em");
var dt = Data_Html_Elements.vnode("dt");
var dl = Data_Html_Elements.vnode("dl");
var div = Data_Html_Elements.vnode("div");
var dialog = Data_Html_Elements.vnode("dialog");
var dfn = Data_Html_Elements.vnode("dfn");
var details = Data_Html_Elements.vnode("details");
var del = Data_Html_Elements.vnode("del");
var dd = Data_Html_Elements.vnode("dd");
var datalist = Data_Html_Elements.vnode("datalist");
var colgroup = Data_Html_Elements.vnode("colgroup");
var col = Data_Html_Elements.vnode("col");
var code = Data_Html_Elements.vnode("code");
var cite = Data_Html_Elements.vnode("cite");
var caption = Data_Html_Elements.vnode("caption");
var canvas = Data_Html_Elements.vnode("canvas");
var button = Data_Html_Elements.vnode("button");
var br = Data_Html_Elements.vnode("br");
var blockquote = Data_Html_Elements.vnode("blockquote");
var bdo = Data_Html_Elements.vnode("bdo");
var bdi = Data_Html_Elements.vnode("bdi");
var base = Data_Html_Elements.vnode("base");
var b = Data_Html_Elements.vnode("b");
var audio = Data_Html_Elements.vnode("audio");
var aside = Data_Html_Elements.vnode("aside");
var article = Data_Html_Elements.vnode("article");
var area = Data_Html_Elements.vnode("area");
var address = Data_Html_Elements.vnode("address");
var abbr = Data_Html_Elements.vnode("abbr");
var a = Data_Html_Elements.vnode("a");
module.exports = {
    a: a, 
    abbr: abbr, 
    address: address, 
    area: area, 
    article: article, 
    aside: aside, 
    audio: audio, 
    b: b, 
    base: base, 
    bdi: bdi, 
    bdo: bdo, 
    blockquote: blockquote, 
    br: br, 
    button: button, 
    canvas: canvas, 
    caption: caption, 
    cite: cite, 
    code: code, 
    col: col, 
    colgroup: colgroup, 
    datalist: datalist, 
    dd: dd, 
    del: del, 
    details: details, 
    dfn: dfn, 
    dialog: dialog, 
    div: div, 
    dl: dl, 
    dt: dt, 
    em: em, 
    embed: embed, 
    fieldset: fieldset, 
    figcaption: figcaption, 
    figure: figure, 
    footer: footer, 
    form: form, 
    h1: h1, 
    h2: h2, 
    h3: h3, 
    h4: h4, 
    h5: h5, 
    h6: h6, 
    header: header, 
    hgroup: hgroup, 
    hr: hr, 
    i: i, 
    iframe: iframe, 
    img: img, 
    input: input, 
    ins: ins, 
    kbd: kbd, 
    keygen: keygen, 
    label: label, 
    legend: legend, 
    li: li, 
    link: link, 
    main: main, 
    map: map, 
    mark: mark, 
    menu: menu, 
    menuitem: menuitem, 
    meta: meta, 
    meter: meter, 
    nav: nav, 
    noscript: noscript, 
    object: object, 
    ol: ol, 
    optgroup: optgroup, 
    option: option, 
    output: output, 
    p: p, 
    param: param, 
    pre: pre, 
    progress: progress, 
    q: q, 
    rp: rp, 
    rt: rt, 
    ruby: ruby, 
    s: s, 
    samp: samp, 
    script: script, 
    section: section, 
    select: select, 
    small: small, 
    source: source, 
    span: span, 
    strong: strong, 
    style: style, 
    sub: sub, 
    summary: summary, 
    sup: sup, 
    table: table, 
    tbody: tbody, 
    td: td, 
    text: text, 
    textarea: textarea, 
    tfoot: tfoot, 
    th: th, 
    thead: thead, 
    time: time, 
    tr: tr, 
    track: track, 
    u: u, 
    ul: ul, 
    "var": $$var, 
    video: video, 
    wbr: wbr
};

},{"Data.Html.Elements":19,"Prelude":35}],19:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Data_Function = require("Data.Function");
var Data_Html_Internal_Attributes = require("Data.Html.Internal.Attributes");
var Data_Html_Internal_VirtualDOM = require("Data.Html.Internal.VirtualDOM");
var Prelude = require("Prelude");

function vnodeImpl (fn, name, attrs, children) {
  var props     = {}
    , key       = undefined
    , namespace = undefined;

  for(var i = 0; i < attrs.length; i++) {
    var attr = attrs[i];
    var typ  = fn.attrType(attr);
    if(typ === fn.attrTypes.attribute) {
      props[fn.attrKey(attr)] = fn.attrVal(attr);
    } else if (typ === fn.attrTypes.key) {
      key = fn.getKey(attr);
    } else {
      namespace = fn.getNs(attr);
    }
  }

  if( name.toUpperCase() === "INPUT" &&
      !namespace &&
      props.hasOwnProperty('value') &&
      props.value !== undefined &&
      !fn.isHook(props.value)
    ) {
      props.value = fn.softSetHook(props.value);
    }

  return new fn.vnode(name, props, children, key, namespace);
};

function vtextImpl(vtext, text){
  return new vtext(text);
};
var vnode = Data_Function.runFn4(vnodeImpl)({
    attrType: Data_Html_Internal_Attributes.attrType, 
    attrTypes: Data_Html_Internal_Attributes.attrTypes, 
    attrKey: Data_Html_Internal_Attributes.getAttrKey, 
    attrVal: Data_Html_Internal_Attributes.getAttrValue, 
    getKey: Data_Html_Internal_Attributes.getKeyString, 
    getNs: Data_Html_Internal_Attributes.getNamespaceString, 
    vnode: Data_Html_Internal_VirtualDOM.virtualDOM.vnode, 
    isHook: Data_Html_Internal_VirtualDOM.virtualDOM.isHook, 
    softSetHook: Data_Html_Internal_VirtualDOM.virtualDOM.softSetHook
});
var text = Data_Function.runFn2(vtextImpl)(Data_Html_Internal_VirtualDOM.virtualDOM.vtext);
module.exports = {
    text: text, 
    vnode: vnode
};

},{"Data.Function":15,"Data.Html.Internal.Attributes":21,"Data.Html.Internal.VirtualDOM":23,"Prelude":35}],20:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Data_String = require("Data.String");
var Data_Function = require("Data.Function");
var Data_Html_Attributes = require("Data.Html.Attributes");
var Data_Html_Internal_Events = require("Data.Html.Internal.Events");
function Left() {

};
Left.value = new Left();
function Middle() {

};
Middle.value = new Middle();
function Right() {

};
Right.value = new Right();
function EventLike() {

};
function HasModifier(altKey, ctrlKey, metaKey, shiftKey) {
    this.altKey = altKey;
    this.ctrlKey = ctrlKey;
    this.metaKey = metaKey;
    this.shiftKey = shiftKey;
};
function HasPosition(client, page, screen) {
    this.client = client;
    this.page = page;
    this.screen = screen;
};

function eventPropImpl(ev, prop) {
  return ev[prop];
};

function keyCode(evt){
  evt = evt || window.event;
  return evt.which || evt.keyCode;
};

function fromCharCode(c) {
  return String.fromCharCode(c);
};

function testBitImpl(n, b) {
  return (n>>b) % 2 !== 0
};

function buttonNumber(evt) {
  return evt.button;
};

function positionImpl(i, evt){
  return {x: evt[i.x], y: evt[i.y]};
};
var showPosition = function (p) {
    return "(" + (Prelude.show(Prelude.showNumber)(p.x) + ("," + (Prelude.show(Prelude.showNumber)(p.y) + ")")));
};
var showButton = new Prelude.Show(function (_6) {
    if (_6 instanceof Left) {
        return "Left";
    };
    if (_6 instanceof Middle) {
        return "Middle";
    };
    if (_6 instanceof Right) {
        return "Right";
    };
    throw new Error("Failed pattern match");
});
var shiftKey = function (dict) {
    return dict.shiftKey;
};
var screen = function (dict) {
    return dict.screen;
};
var page = function (dict) {
    return dict.page;
};
var onUnload = Data_Html_Attributes.on_("unload");
var onTouchStart = function (f) {
    return Data_Html_Attributes.on_("touchstart")(Prelude["<<<"](Prelude.semigroupoidArr)(f)(Data_Html_Internal_Events.MouseHoverEvent.create));
};
var onTouchEnd = function (f) {
    return Data_Html_Attributes.on_("touchend")(Prelude["<<<"](Prelude.semigroupoidArr)(f)(Data_Html_Internal_Events.MouseHoverEvent.create));
};
var onTouchCancel = function (f) {
    return Data_Html_Attributes.on_("touchcalcel")(Prelude["<<<"](Prelude.semigroupoidArr)(f)(Data_Html_Internal_Events.MouseHoverEvent.create));
};
var onSubmit = Data_Html_Attributes.on_("submit");
var onSelect = Data_Html_Attributes.on_("select");
var onMouseUp = function (f) {
    return Data_Html_Attributes.on_("mouseup")(Prelude["<<<"](Prelude.semigroupoidArr)(f)(Data_Html_Internal_Events.MouseButtonEvent.create));
};
var onMouseDown = function (f) {
    return Data_Html_Attributes.on_("mousedown")(Prelude["<<<"](Prelude.semigroupoidArr)(f)(Data_Html_Internal_Events.MouseButtonEvent.create));
};
var onKeyUp = function (f) {
    return Data_Html_Attributes.on_("keyup")(Prelude["<<<"](Prelude.semigroupoidArr)(f)(Data_Html_Internal_Events.KeyEvent.create));
};
var onKeyPress = function (f) {
    return Data_Html_Attributes.on_("keypress")(Prelude["<<<"](Prelude.semigroupoidArr)(f)(Data_Html_Internal_Events.KeyEvent.create));
};
var onKeyDown = function (f) {
    return Data_Html_Attributes.on_("keydown")(Prelude["<<<"](Prelude.semigroupoidArr)(f)(Data_Html_Internal_Events.KeyEvent.create));
};
var onInput = Data_Html_Attributes.on_("input");
var onFocusOut = Data_Html_Attributes.on_("focusout");
var onFocusIn = Data_Html_Attributes.on_("focusin");
var onFocus = Data_Html_Attributes.on_("focus");
var onDoubleClick = function (f) {
    return Data_Html_Attributes.on_("dblclick")(Prelude["<<<"](Prelude.semigroupoidArr)(f)(Data_Html_Internal_Events.MouseButtonEvent.create));
};
var onContextMenu = function (f) {
    return Data_Html_Attributes.on_("contextmenu")(Prelude["<<<"](Prelude.semigroupoidArr)(f)(Data_Html_Internal_Events.MouseButtonEvent.create));
};
var onClick = function (f) {
    return Data_Html_Attributes.on_("click")(Prelude["<<<"](Prelude.semigroupoidArr)(f)(Data_Html_Internal_Events.MouseButtonEvent.create));
};
var onChange = Data_Html_Attributes.on_("change");
var onBlur = Data_Html_Attributes.on_("blur");
var mouseHoverHasPosition = new HasPosition(Data_Function.runFn2(positionImpl)({
    x: "clientX", 
    y: "clientY"
}), Data_Function.runFn2(positionImpl)({
    x: "pageX", 
    y: "pageY"
}), Data_Function.runFn2(positionImpl)({
    x: "screenX", 
    y: "screenY"
}));
var mouseButtonHasPosition = new HasPosition(Data_Function.runFn2(positionImpl)({
    x: "clientX", 
    y: "clientY"
}), Data_Function.runFn2(positionImpl)({
    x: "pageX", 
    y: "pageY"
}), Data_Function.runFn2(positionImpl)({
    x: "screenX", 
    y: "screenY"
}));
var metaKey = function (dict) {
    return dict.metaKey;
};
var eventProp = Data_Function.runFn2(eventPropImpl);
var keyEventHasModifier = new HasModifier(function (_7) {
    return eventProp(_7)("altKey");
}, function (_8) {
    return eventProp(_8)("ctrlKey");
}, function (_9) {
    return eventProp(_9)("metaKey");
}, function (_10) {
    return eventProp(_10)("shiftKey");
});
var mouseButtonEventHasModifier = new HasModifier(function (_11) {
    return eventProp(_11)("altKey");
}, function (_12) {
    return eventProp(_12)("ctrlKey");
}, function (_13) {
    return eventProp(_13)("metaKey");
}, function (_14) {
    return eventProp(_14)("shiftKey");
});
var mouseHoverEventHasModifier = new HasModifier(function (_15) {
    return eventProp(_15)("altKey");
}, function (_16) {
    return eventProp(_16)("ctrlKey");
}, function (_17) {
    return eventProp(_17)("metaKey");
}, function (_18) {
    return eventProp(_18)("shiftKey");
});
var targetChecked = function (__dict_EventLike_0) {
    return function (e) {
        return eventProp(eventProp(e)("target"))("checked");
    };
};
var targetValue = function (__dict_EventLike_1) {
    return function (e) {
        return eventProp(eventProp(e)("target"))("value");
    };
};
var eventLikeMouseHoverEvent = new EventLike();
var eventLikeMouseButtonEvent = new EventLike();
var eventLikeKeyEvent = new EventLike();
var eventLikeEvent = new EventLike();
var ctrlKey = function (dict) {
    return dict.ctrlKey;
};
var client = function (dict) {
    return dict.client;
};
var button = function (e) {
    var _54 = buttonNumber(e);
    if (_54 === 0) {
        return Left.value;
    };
    if (_54 === 2) {
        return Right.value;
    };
    return Middle.value;
};
var altKey = function (dict) {
    return dict.altKey;
};
var showKeyEvent = new Prelude.Show(function (e) {
    return Data_String.joinWith("")([ altKey(keyEventHasModifier)(e) ? "Alt-" : "", ctrlKey(keyEventHasModifier)(e) ? "Ctrl-" : "", metaKey(keyEventHasModifier)(e) ? "Meta-" : "", shiftKey(keyEventHasModifier)(e) ? "Shift-" : "", fromCharCode(keyCode(e)) ]);
});
var showMouseButtonEvent = new Prelude.Show(function (e) {
    return Data_String.joinWith("")([ altKey(mouseButtonEventHasModifier)(e) ? "Alt-" : "", ctrlKey(mouseButtonEventHasModifier)(e) ? "Ctrl-" : "", metaKey(mouseButtonEventHasModifier)(e) ? "Meta-" : "", shiftKey(mouseButtonEventHasModifier)(e) ? "Shift-" : "", Prelude.show(showButton)(button(e)), "[client:", showPosition(client(mouseButtonHasPosition)(e)), ",page:", showPosition(page(mouseButtonHasPosition)(e)), ",screen:", showPosition(screen(mouseButtonHasPosition)(e)), "]" ]);
});
var showMouseHoverEvent = new Prelude.Show(function (e) {
    return Data_String.joinWith("")([ altKey(mouseHoverEventHasModifier)(e) ? "Alt-" : "", ctrlKey(mouseHoverEventHasModifier)(e) ? "Ctrl-" : "", metaKey(mouseHoverEventHasModifier)(e) ? "Meta-" : "", shiftKey(mouseHoverEventHasModifier)(e) ? "Shift-" : "", "[client:", showPosition(client(mouseHoverHasPosition)(e)), ",page:", showPosition(page(mouseHoverHasPosition)(e)), ",screen:", showPosition(screen(mouseHoverHasPosition)(e)), "]" ]);
});
module.exports = {
    EventLike: EventLike, 
    HasModifier: HasModifier, 
    HasPosition: HasPosition, 
    Left: Left, 
    Middle: Middle, 
    Right: Right, 
    altKey: altKey, 
    button: button, 
    client: client, 
    ctrlKey: ctrlKey, 
    eventLikeEvent: eventLikeEvent, 
    eventLikeKeyEvent: eventLikeKeyEvent, 
    eventLikeMouseButtonEvent: eventLikeMouseButtonEvent, 
    eventLikeMouseHoverEvent: eventLikeMouseHoverEvent, 
    keyCode: keyCode, 
    keyEventHasModifier: keyEventHasModifier, 
    metaKey: metaKey, 
    mouseButtonEventHasModifier: mouseButtonEventHasModifier, 
    mouseButtonHasPosition: mouseButtonHasPosition, 
    mouseHoverEventHasModifier: mouseHoverEventHasModifier, 
    mouseHoverHasPosition: mouseHoverHasPosition, 
    onBlur: onBlur, 
    onChange: onChange, 
    onClick: onClick, 
    onContextMenu: onContextMenu, 
    onDoubleClick: onDoubleClick, 
    onFocus: onFocus, 
    onFocusIn: onFocusIn, 
    onFocusOut: onFocusOut, 
    onInput: onInput, 
    onKeyDown: onKeyDown, 
    onKeyPress: onKeyPress, 
    onKeyUp: onKeyUp, 
    onMouseDown: onMouseDown, 
    onMouseUp: onMouseUp, 
    onSelect: onSelect, 
    onSubmit: onSubmit, 
    onTouchCancel: onTouchCancel, 
    onTouchEnd: onTouchEnd, 
    onTouchStart: onTouchStart, 
    onUnload: onUnload, 
    page: page, 
    screen: screen, 
    shiftKey: shiftKey, 
    showButton: showButton, 
    showKeyEvent: showKeyEvent, 
    showMouseButtonEvent: showMouseButtonEvent, 
    showMouseHoverEvent: showMouseHoverEvent, 
    targetChecked: targetChecked, 
    targetValue: targetValue
};

},{"Data.Function":15,"Data.Html.Attributes":17,"Data.Html.Internal.Events":22,"Data.String":29,"Prelude":35}],21:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function Attribute(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
Attribute.create = function (value0) {
    return function (value1) {
        return new Attribute(value0, value1);
    };
};
function Key(value0) {
    this.value0 = value0;
};
Key.create = function (value0) {
    return new Key(value0);
};
function Namespace(value0) {
    this.value0 = value0;
};
Namespace.create = function (value0) {
    return new Namespace(value0);
};
var AttrType = {
    create: function (value) {
        return value;
    }
};

function unsafeCoerce(a) {
  return a;
};
var namespace = 1;
var key = 2;
var getNamespaceString = function (_5) {
    if (_5 instanceof Namespace) {
        return _5.value0;
    };
    throw new Error("Failed pattern match");
};
var getKeyString = function (_4) {
    if (_4 instanceof Key) {
        return _4.value0;
    };
    throw new Error("Failed pattern match");
};
var getAttrValue = function (_3) {
    if (_3 instanceof Attribute) {
        return _3.value1;
    };
    throw new Error("Failed pattern match");
};
var getAttrKey = function (_2) {
    if (_2 instanceof Attribute) {
        return _2.value0;
    };
    throw new Error("Failed pattern match");
};
var attriute = 0;
var attribute = Attribute.create;
var attrTypes = {
    attribute: attriute, 
    namespace: namespace, 
    key: key
};
var attrType = function (_1) {
    if (_1 instanceof Attribute) {
        return attriute;
    };
    if (_1 instanceof Namespace) {
        return namespace;
    };
    if (_1 instanceof Key) {
        return key;
    };
    throw new Error("Failed pattern match");
};
module.exports = {
    Attribute: Attribute, 
    Key: Key, 
    Namespace: Namespace, 
    attrType: attrType, 
    attrTypes: attrTypes, 
    attribute: attribute, 
    attriute: attriute, 
    getAttrKey: getAttrKey, 
    getAttrValue: getAttrValue, 
    getKeyString: getKeyString, 
    getNamespaceString: getNamespaceString, 
    key: key, 
    namespace: namespace, 
    unsafeCoerce: unsafeCoerce
};

},{"Prelude":35}],22:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var MouseHoverEvent = {
    create: function (value) {
        return value;
    }
};
var MouseButtonEvent = {
    create: function (value) {
        return value;
    }
};
var KeyEvent = {
    create: function (value) {
        return value;
    }
};
module.exports = {
    KeyEvent: KeyEvent, 
    MouseButtonEvent: MouseButtonEvent, 
    MouseHoverEvent: MouseHoverEvent
};

},{"Prelude":35}],23:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");

var virtualDOM =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var diff    = __webpack_require__(15);
	var patch   = __webpack_require__(16);
	var create  = __webpack_require__(14);
	var VNode   = __webpack_require__(22);
	var VText   = __webpack_require__(23);
	var isHook  = __webpack_require__(3);

	var softSetHook = __webpack_require__(21);

	module.exports =
	  { diff:        diff
	  , patch:       patch
	  , create:      create
	  , vnode:       VNode
	  , vtext:       VText
	  , isHook:      isHook
	  , softSetHook: softSetHook
	  }


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = isWidget

	function isWidget(w) {
	    return w && w.type === "Widget"
	}


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "1"


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = isHook

	function isHook(hook) {
	    return hook && typeof hook.hook === "function" &&
	        !hook.hasOwnProperty("hook")
	}


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var version = __webpack_require__(2)

	module.exports = isVirtualNode

	function isVirtualNode(x) {
	    return x && x.type === "VirtualNode" && x.version === version
	}


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = isThunk

	function isThunk(t) {
	    return t && t.type === "Thunk"
	}


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var version = __webpack_require__(2)

	module.exports = isVirtualText

	function isVirtualText(x) {
	    return x && x.type === "VirtualText" && x.version === version
	}


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var topLevel = typeof global !== 'undefined' ? global :
	    typeof window !== 'undefined' ? window : {}
	var minDoc = __webpack_require__(25);

	if (typeof document !== 'undefined') {
	    module.exports = document;
	} else {
	    var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

	    if (!doccy) {
	        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
	    }

	    module.exports = doccy;
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	module.exports = function isObject(x) {
		return typeof x === "object" && x !== null;
	};


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var nativeIsArray = Array.isArray
	var toString = Object.prototype.toString

	module.exports = nativeIsArray || isArray

	function isArray(obj) {
	    return toString.call(obj) === "[object Array]"
	}


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(8)
	var isHook = __webpack_require__(3)

	module.exports = applyProperties

	function applyProperties(node, props, previous) {
	    for (var propName in props) {
	        var propValue = props[propName]

	        if (propValue === undefined) {
	            removeProperty(node, props, previous, propName);
	        } else if (isHook(propValue)) {
	            propValue.hook(node,
	                propName,
	                previous ? previous[propName] : undefined)
	        } else {
	            if (isObject(propValue)) {
	                patchObject(node, props, previous, propName, propValue);
	            } else if (propValue !== undefined) {
	                node[propName] = propValue
	            }
	        }
	    }
	}

	function removeProperty(node, props, previous, propName) {
	    if (previous) {
	        var previousValue = previous[propName]

	        if (!isHook(previousValue)) {
	            if (propName === "attributes") {
	                for (var attrName in previousValue) {
	                    node.removeAttribute(attrName)
	                }
	            } else if (propName === "style") {
	                for (var i in previousValue) {
	                    node.style[i] = ""
	                }
	            } else if (typeof previousValue === "string") {
	                node[propName] = ""
	            } else {
	                node[propName] = null
	            }
	        } else if (previousValue.unhook) {
	            previousValue.unhook(node, propName)
	        }
	    }
	}

	function patchObject(node, props, previous, propName, propValue) {
	    var previousValue = previous ? previous[propName] : undefined

	    // Set attributes
	    if (propName === "attributes") {
	        for (var attrName in propValue) {
	            var attrValue = propValue[attrName]

	            if (attrValue === undefined) {
	                node.removeAttribute(attrName)
	            } else {
	                node.setAttribute(attrName, attrValue)
	            }
	        }

	        return
	    }

	    if(previousValue && isObject(previousValue) &&
	        getPrototype(previousValue) !== getPrototype(propValue)) {
	        node[propName] = propValue
	        return
	    }

	    if (!isObject(node[propName])) {
	        node[propName] = {}
	    }

	    var replacer = propName === "style" ? "" : undefined

	    for (var k in propValue) {
	        var value = propValue[k]
	        node[propName][k] = (value === undefined) ? replacer : value
	    }
	}

	function getPrototype(value) {
	    if (Object.getPrototypeOf) {
	        return Object.getPrototypeOf(value)
	    } else if (value.__proto__) {
	        return value.__proto__
	    } else if (value.constructor) {
	        return value.constructor.prototype
	    }
	}


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var document = __webpack_require__(7)

	var applyProperties = __webpack_require__(10)

	var isVNode = __webpack_require__(4)
	var isVText = __webpack_require__(6)
	var isWidget = __webpack_require__(1)
	var handleThunk = __webpack_require__(12)

	module.exports = createElement

	function createElement(vnode, opts) {
	    var doc = opts ? opts.document || document : document
	    var warn = opts ? opts.warn : null

	    vnode = handleThunk(vnode).a

	    if (isWidget(vnode)) {
	        return vnode.init()
	    } else if (isVText(vnode)) {
	        return doc.createTextNode(vnode.text)
	    } else if (!isVNode(vnode)) {
	        if (warn) {
	            warn("Item is not a valid virtual dom node", vnode)
	        }
	        return null
	    }

	    var node = (vnode.namespace === null) ?
	        doc.createElement(vnode.tagName) :
	        doc.createElementNS(vnode.namespace, vnode.tagName)

	    var props = vnode.properties
	    applyProperties(node, props)

	    var children = vnode.children

	    for (var i = 0; i < children.length; i++) {
	        var childNode = createElement(children[i], opts)
	        if (childNode) {
	            node.appendChild(childNode)
	        }
	    }

	    return node
	}


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var isVNode = __webpack_require__(4)
	var isVText = __webpack_require__(6)
	var isWidget = __webpack_require__(1)
	var isThunk = __webpack_require__(5)

	module.exports = handleThunk

	function handleThunk(a, b) {
	    var renderedA = a
	    var renderedB = b

	    if (isThunk(b)) {
	        renderedB = renderThunk(b, a)
	    }

	    if (isThunk(a)) {
	        renderedA = renderThunk(a, null)
	    }

	    return {
	        a: renderedA,
	        b: renderedB
	    }
	}

	function renderThunk(thunk, previous) {
	    var renderedThunk = thunk.vnode

	    if (!renderedThunk) {
	        renderedThunk = thunk.vnode = thunk.render(previous)
	    }

	    if (!(isVNode(renderedThunk) ||
	            isVText(renderedThunk) ||
	            isWidget(renderedThunk))) {
	        throw new Error("thunk did not return a valid node");
	    }

	    return renderedThunk
	}


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var version = __webpack_require__(2)

	VirtualPatch.NONE = 0
	VirtualPatch.VTEXT = 1
	VirtualPatch.VNODE = 2
	VirtualPatch.WIDGET = 3
	VirtualPatch.PROPS = 4
	VirtualPatch.ORDER = 5
	VirtualPatch.INSERT = 6
	VirtualPatch.REMOVE = 7
	VirtualPatch.THUNK = 8

	module.exports = VirtualPatch

	function VirtualPatch(type, vNode, patch) {
	    this.type = Number(type)
	    this.vNode = vNode
	    this.patch = patch
	}

	VirtualPatch.prototype.version = version
	VirtualPatch.prototype.type = "VirtualPatch"


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	var createElement = __webpack_require__(11)

	module.exports = createElement


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var diff = __webpack_require__(24)

	module.exports = diff


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	var patch = __webpack_require__(19)

	module.exports = patch


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	// Maps a virtual DOM tree onto a real DOM tree in an efficient manner.
	// We don't want to read all of the DOM nodes in the tree so we use
	// the in-order tree indexing to eliminate recursion down certain branches.
	// We only recurse into a DOM node if we know that it contains a child of
	// interest.

	var noChild = {}

	module.exports = domIndex

	function domIndex(rootNode, tree, indices, nodes) {
	    if (!indices || indices.length === 0) {
	        return {}
	    } else {
	        indices.sort(ascending)
	        return recurse(rootNode, tree, indices, nodes, 0)
	    }
	}

	function recurse(rootNode, tree, indices, nodes, rootIndex) {
	    nodes = nodes || {}


	    if (rootNode) {
	        if (indexInRange(indices, rootIndex, rootIndex)) {
	            nodes[rootIndex] = rootNode
	        }

	        var vChildren = tree.children

	        if (vChildren) {

	            var childNodes = rootNode.childNodes

	            for (var i = 0; i < tree.children.length; i++) {
	                rootIndex += 1

	                var vChild = vChildren[i] || noChild
	                var nextIndex = rootIndex + (vChild.count || 0)

	                // skip recursion down the tree if there are no nodes down here
	                if (indexInRange(indices, rootIndex, nextIndex)) {
	                    recurse(childNodes[i], vChild, indices, nodes, rootIndex)
	                }

	                rootIndex = nextIndex
	            }
	        }
	    }

	    return nodes
	}

	// Binary search for an index in the interval [left, right]
	function indexInRange(indices, left, right) {
	    if (indices.length === 0) {
	        return false
	    }

	    var minIndex = 0
	    var maxIndex = indices.length - 1
	    var currentIndex
	    var currentItem

	    while (minIndex <= maxIndex) {
	        currentIndex = ((maxIndex + minIndex) / 2) >> 0
	        currentItem = indices[currentIndex]

	        if (minIndex === maxIndex) {
	            return currentItem >= left && currentItem <= right
	        } else if (currentItem < left) {
	            minIndex = currentIndex + 1
	        } else  if (currentItem > right) {
	            maxIndex = currentIndex - 1
	        } else {
	            return true
	        }
	    }

	    return false;
	}

	function ascending(a, b) {
	    return a > b ? 1 : -1
	}


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var applyProperties = __webpack_require__(10)

	var isWidget = __webpack_require__(1)
	var VPatch = __webpack_require__(13)

	var render = __webpack_require__(11)
	var updateWidget = __webpack_require__(20)

	module.exports = applyPatch

	function applyPatch(vpatch, domNode, renderOptions) {
	    var type = vpatch.type
	    var vNode = vpatch.vNode
	    var patch = vpatch.patch

	    switch (type) {
	        case VPatch.REMOVE:
	            return removeNode(domNode, vNode)
	        case VPatch.INSERT:
	            return insertNode(domNode, patch, renderOptions)
	        case VPatch.VTEXT:
	            return stringPatch(domNode, vNode, patch, renderOptions)
	        case VPatch.WIDGET:
	            return widgetPatch(domNode, vNode, patch, renderOptions)
	        case VPatch.VNODE:
	            return vNodePatch(domNode, vNode, patch, renderOptions)
	        case VPatch.ORDER:
	            reorderChildren(domNode, patch)
	            return domNode
	        case VPatch.PROPS:
	            applyProperties(domNode, patch, vNode.properties)
	            return domNode
	        case VPatch.THUNK:
	            return replaceRoot(domNode,
	                renderOptions.patch(domNode, patch, renderOptions))
	        default:
	            return domNode
	    }
	}

	function removeNode(domNode, vNode) {
	    var parentNode = domNode.parentNode

	    if (parentNode) {
	        parentNode.removeChild(domNode)
	    }

	    destroyWidget(domNode, vNode);

	    return null
	}

	function insertNode(parentNode, vNode, renderOptions) {
	    var newNode = render(vNode, renderOptions)

	    if (parentNode) {
	        parentNode.appendChild(newNode)
	    }

	    return parentNode
	}

	function stringPatch(domNode, leftVNode, vText, renderOptions) {
	    var newNode

	    if (domNode.nodeType === 3) {
	        domNode.replaceData(0, domNode.length, vText.text)
	        newNode = domNode
	    } else {
	        var parentNode = domNode.parentNode
	        newNode = render(vText, renderOptions)

	        if (parentNode) {
	            parentNode.replaceChild(newNode, domNode)
	        }
	    }

	    return newNode
	}

	function widgetPatch(domNode, leftVNode, widget, renderOptions) {
	    var updating = updateWidget(leftVNode, widget)
	    var newNode

	    if (updating) {
	        newNode = widget.update(leftVNode, domNode) || domNode
	    } else {
	        newNode = render(widget, renderOptions)
	    }

	    var parentNode = domNode.parentNode

	    if (parentNode && newNode !== domNode) {
	        parentNode.replaceChild(newNode, domNode)
	    }

	    if (!updating) {
	        destroyWidget(domNode, leftVNode)
	    }

	    return newNode
	}

	function vNodePatch(domNode, leftVNode, vNode, renderOptions) {
	    var parentNode = domNode.parentNode
	    var newNode = render(vNode, renderOptions)

	    if (parentNode) {
	        parentNode.replaceChild(newNode, domNode)
	    }

	    return newNode
	}

	function destroyWidget(domNode, w) {
	    if (typeof w.destroy === "function" && isWidget(w)) {
	        w.destroy(domNode)
	    }
	}

	function reorderChildren(domNode, bIndex) {
	    var children = []
	    var childNodes = domNode.childNodes
	    var len = childNodes.length
	    var i
	    var reverseIndex = bIndex.reverse

	    for (i = 0; i < len; i++) {
	        children.push(domNode.childNodes[i])
	    }

	    var insertOffset = 0
	    var move
	    var node
	    var insertNode
	    var chainLength
	    var insertedLength
	    var nextSibling
	    for (i = 0; i < len;) {
	        move = bIndex[i]
	        chainLength = 1
	        if (move !== undefined && move !== i) {
	            // try to bring forward as long of a chain as possible
	            while (bIndex[i + chainLength] === move + chainLength) {
	                chainLength++;
	            }

	            // the element currently at this index will be moved later so increase the insert offset
	            if (reverseIndex[i] > i + chainLength) {
	                insertOffset++
	            }

	            node = children[move]
	            insertNode = childNodes[i + insertOffset] || null
	            insertedLength = 0
	            while (node !== insertNode && insertedLength++ < chainLength) {
	                domNode.insertBefore(node, insertNode);
	                node = children[move + insertedLength];
	            }

	            // the moved element came from the front of the array so reduce the insert offset
	            if (move + chainLength < i) {
	                insertOffset--
	            }
	        }

	        // element at this index is scheduled to be removed so increase insert offset
	        if (i in bIndex.removes) {
	            insertOffset++
	        }

	        i += chainLength
	    }
	}

	function replaceRoot(oldRoot, newRoot) {
	    if (oldRoot && newRoot && oldRoot !== newRoot && oldRoot.parentNode) {
	        console.log(oldRoot)
	        oldRoot.parentNode.replaceChild(newRoot, oldRoot)
	    }

	    return newRoot;
	}


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	var document = __webpack_require__(7)
	var isArray = __webpack_require__(9)

	var domIndex = __webpack_require__(17)
	var patchOp = __webpack_require__(18)
	module.exports = patch

	function patch(rootNode, patches) {
	    return patchRecursive(rootNode, patches)
	}

	function patchRecursive(rootNode, patches, renderOptions) {
	    var indices = patchIndices(patches)

	    if (indices.length === 0) {
	        return rootNode
	    }

	    var index = domIndex(rootNode, patches.a, indices)
	    var ownerDocument = rootNode.ownerDocument

	    if (!renderOptions) {
	        renderOptions = { patch: patchRecursive }
	        if (ownerDocument !== document) {
	            renderOptions.document = ownerDocument
	        }
	    }

	    for (var i = 0; i < indices.length; i++) {
	        var nodeIndex = indices[i]
	        rootNode = applyPatch(rootNode,
	            index[nodeIndex],
	            patches[nodeIndex],
	            renderOptions)
	    }

	    return rootNode
	}

	function applyPatch(rootNode, domNode, patchList, renderOptions) {
	    if (!domNode) {
	        return rootNode
	    }

	    var newNode

	    if (isArray(patchList)) {
	        for (var i = 0; i < patchList.length; i++) {
	            newNode = patchOp(patchList[i], domNode, renderOptions)

	            if (domNode === rootNode) {
	                rootNode = newNode
	            }
	        }
	    } else {
	        newNode = patchOp(patchList, domNode, renderOptions)

	        if (domNode === rootNode) {
	            rootNode = newNode
	        }
	    }

	    return rootNode
	}

	function patchIndices(patches) {
	    var indices = []

	    for (var key in patches) {
	        if (key !== "a") {
	            indices.push(Number(key))
	        }
	    }

	    return indices
	}


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	var isWidget = __webpack_require__(1)

	module.exports = updateWidget

	function updateWidget(a, b) {
	    if (isWidget(a) && isWidget(b)) {
	        if ("name" in a && "name" in b) {
	            return a.id === b.id
	        } else {
	            return a.init === b.init
	        }
	    }

	    return false
	}


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = SoftSetHook;

	function SoftSetHook(value) {
	    if (!(this instanceof SoftSetHook)) {
	        return new SoftSetHook(value);
	    }

	    this.value = value;
	}

	SoftSetHook.prototype.hook = function (node, propertyName) {
	    if (node[propertyName] !== this.value) {
	        node[propertyName] = this.value;
	    }
	};


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var version = __webpack_require__(2)
	var isVNode = __webpack_require__(4)
	var isWidget = __webpack_require__(1)
	var isThunk = __webpack_require__(5)
	var isVHook = __webpack_require__(3)

	module.exports = VirtualNode

	var noProperties = {}
	var noChildren = []

	function VirtualNode(tagName, properties, children, key, namespace) {
	    this.tagName = tagName
	    this.properties = properties || noProperties
	    this.children = children || noChildren
	    this.key = key != null ? String(key) : undefined
	    this.namespace = (typeof namespace === "string") ? namespace : null

	    var count = (children && children.length) || 0
	    var descendants = 0
	    var hasWidgets = false
	    var hasThunks = false
	    var descendantHooks = false
	    var hooks

	    for (var propName in properties) {
	        if (properties.hasOwnProperty(propName)) {
	            var property = properties[propName]
	            if (isVHook(property) && property.unhook) {
	                if (!hooks) {
	                    hooks = {}
	                }

	                hooks[propName] = property
	            }
	        }
	    }

	    for (var i = 0; i < count; i++) {
	        var child = children[i]
	        if (isVNode(child)) {
	            descendants += child.count || 0

	            if (!hasWidgets && child.hasWidgets) {
	                hasWidgets = true
	            }

	            if (!hasThunks && child.hasThunks) {
	                hasThunks = true
	            }

	            if (!descendantHooks && (child.hooks || child.descendantHooks)) {
	                descendantHooks = true
	            }
	        } else if (!hasWidgets && isWidget(child)) {
	            if (typeof child.destroy === "function") {
	                hasWidgets = true
	            }
	        } else if (!hasThunks && isThunk(child)) {
	            hasThunks = true;
	        }
	    }

	    this.count = count + descendants
	    this.hasWidgets = hasWidgets
	    this.hasThunks = hasThunks
	    this.hooks = hooks
	    this.descendantHooks = descendantHooks
	}

	VirtualNode.prototype.version = version
	VirtualNode.prototype.type = "VirtualNode"


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var version = __webpack_require__(2)

	module.exports = VirtualText

	function VirtualText(text) {
	    this.text = String(text)
	}

	VirtualText.prototype.version = version
	VirtualText.prototype.type = "VirtualText"


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(9)
	var isObject = __webpack_require__(8)

	var VPatch = __webpack_require__(13)
	var isVNode = __webpack_require__(4)
	var isVText = __webpack_require__(6)
	var isWidget = __webpack_require__(1)
	var isThunk = __webpack_require__(5)
	var isHook = __webpack_require__(3)
	var handleThunk = __webpack_require__(12)

	module.exports = diff

	function diff(a, b) {
	    var patch = { a: a }
	    walk(a, b, patch, 0)
	    return patch
	}

	function walk(a, b, patch, index) {
	    if (a === b) {
	        return
	    }

	    var apply = patch[index]
	    var applyClear = false

	    if (isThunk(a) || isThunk(b)) {
	        thunks(a, b, patch, index)
	    } else if (b == null) {

	        // If a is a widget we will add a remove patch for it
	        // Otherwise any child widgets/hooks must be destroyed.
	        // This prevents adding two remove patches for a widget.
	        if (!isWidget(a)) {
	            clearState(a, patch, index)
	            apply = patch[index]
	        }

	        apply = appendPatch(apply, new VPatch(VPatch.REMOVE, a, b))
	    } else if (isVNode(b)) {
	        if (isVNode(a)) {
	            if (a.tagName === b.tagName &&
	                a.namespace === b.namespace &&
	                a.key === b.key) {
	                var propsPatch = diffProps(a.properties, b.properties)
	                if (propsPatch) {
	                    apply = appendPatch(apply,
	                        new VPatch(VPatch.PROPS, a, propsPatch))
	                }
	                apply = diffChildren(a, b, patch, apply, index)
	            } else {
	                apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))
	                applyClear = true
	            }
	        } else {
	            apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))
	            applyClear = true
	        }
	    } else if (isVText(b)) {
	        if (!isVText(a)) {
	            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))
	            applyClear = true
	        } else if (a.text !== b.text) {
	            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))
	        }
	    } else if (isWidget(b)) {
	        if (!isWidget(a)) {
	            applyClear = true;
	        }

	        apply = appendPatch(apply, new VPatch(VPatch.WIDGET, a, b))
	    }

	    if (apply) {
	        patch[index] = apply
	    }

	    if (applyClear) {
	        clearState(a, patch, index)
	    }
	}

	function diffProps(a, b) {
	    var diff

	    for (var aKey in a) {
	        if (!(aKey in b)) {
	            diff = diff || {}
	            diff[aKey] = undefined
	        }

	        var aValue = a[aKey]
	        var bValue = b[aKey]

	        if (aValue === bValue) {
	            continue
	        } else if (isObject(aValue) && isObject(bValue)) {
	            if (getPrototype(bValue) !== getPrototype(aValue)) {
	                diff = diff || {}
	                diff[aKey] = bValue
	            } else if (isHook(bValue)) {
	                 diff = diff || {}
	                 diff[aKey] = bValue
	            } else {
	                var objectDiff = diffProps(aValue, bValue)
	                if (objectDiff) {
	                    diff = diff || {}
	                    diff[aKey] = objectDiff
	                }
	            }
	        } else {
	            diff = diff || {}
	            diff[aKey] = bValue
	        }
	    }

	    for (var bKey in b) {
	        if (!(bKey in a)) {
	            diff = diff || {}
	            diff[bKey] = b[bKey]
	        }
	    }

	    return diff
	}

	function getPrototype(value) {
	    if (Object.getPrototypeOf) {
	        return Object.getPrototypeOf(value)
	    } else if (value.__proto__) {
	        return value.__proto__
	    } else if (value.constructor) {
	        return value.constructor.prototype
	    }
	}

	function diffChildren(a, b, patch, apply, index) {
	    var aChildren = a.children
	    var bChildren = reorder(aChildren, b.children)

	    var aLen = aChildren.length
	    var bLen = bChildren.length
	    var len = aLen > bLen ? aLen : bLen

	    for (var i = 0; i < len; i++) {
	        var leftNode = aChildren[i]
	        var rightNode = bChildren[i]
	        index += 1

	        if (!leftNode) {
	            if (rightNode) {
	                // Excess nodes in b need to be added
	                apply = appendPatch(apply,
	                    new VPatch(VPatch.INSERT, null, rightNode))
	            }
	        } else {
	            walk(leftNode, rightNode, patch, index)
	        }

	        if (isVNode(leftNode) && leftNode.count) {
	            index += leftNode.count
	        }
	    }

	    if (bChildren.moves) {
	        // Reorder nodes last
	        apply = appendPatch(apply, new VPatch(VPatch.ORDER, a, bChildren.moves))
	    }

	    return apply
	}

	function clearState(vNode, patch, index) {
	    // TODO: Make this a single walk, not two
	    unhook(vNode, patch, index)
	    destroyWidgets(vNode, patch, index)
	}

	// Patch records for all destroyed widgets must be added because we need
	// a DOM node reference for the destroy function
	function destroyWidgets(vNode, patch, index) {
	    if (isWidget(vNode)) {
	        if (typeof vNode.destroy === "function") {
	            patch[index] = appendPatch(
	                patch[index],
	                new VPatch(VPatch.REMOVE, vNode, null)
	            )
	        }
	    } else if (isVNode(vNode) && (vNode.hasWidgets || vNode.hasThunks)) {
	        var children = vNode.children
	        var len = children.length
	        for (var i = 0; i < len; i++) {
	            var child = children[i]
	            index += 1

	            destroyWidgets(child, patch, index)

	            if (isVNode(child) && child.count) {
	                index += child.count
	            }
	        }
	    } else if (isThunk(vNode)) {
	        thunks(vNode, null, patch, index)
	    }
	}

	// Create a sub-patch for thunks
	function thunks(a, b, patch, index) {
	    var nodes = handleThunk(a, b);
	    var thunkPatch = diff(nodes.a, nodes.b)
	    if (hasPatches(thunkPatch)) {
	        patch[index] = new VPatch(VPatch.THUNK, null, thunkPatch)
	    }
	}

	function hasPatches(patch) {
	    for (var index in patch) {
	        if (index !== "a") {
	            return true;
	        }
	    }

	    return false;
	}

	// Execute hooks when two nodes are identical
	function unhook(vNode, patch, index) {
	    if (isVNode(vNode)) {
	        if (vNode.hooks) {
	            patch[index] = appendPatch(
	                patch[index],
	                new VPatch(
	                    VPatch.PROPS,
	                    vNode,
	                    undefinedKeys(vNode.hooks)
	                )
	            )
	        }

	        if (vNode.descendantHooks || vNode.hasThunks) {
	            var children = vNode.children
	            var len = children.length
	            for (var i = 0; i < len; i++) {
	                var child = children[i]
	                index += 1

	                unhook(child, patch, index)

	                if (isVNode(child) && child.count) {
	                    index += child.count
	                }
	            }
	        }
	    } else if (isThunk(vNode)) {
	        thunks(vNode, null, patch, index)
	    }
	}

	function undefinedKeys(obj) {
	    var result = {}

	    for (var key in obj) {
	        result[key] = undefined
	    }

	    return result
	}

	// List diff, naive left to right reordering
	function reorder(aChildren, bChildren) {

	    var bKeys = keyIndex(bChildren)

	    if (!bKeys) {
	        return bChildren
	    }

	    var aKeys = keyIndex(aChildren)

	    if (!aKeys) {
	        return bChildren
	    }

	    var bMatch = {}, aMatch = {}

	    for (var aKey in bKeys) {
	        bMatch[bKeys[aKey]] = aKeys[aKey]
	    }

	    for (var bKey in aKeys) {
	        aMatch[aKeys[bKey]] = bKeys[bKey]
	    }

	    var aLen = aChildren.length
	    var bLen = bChildren.length
	    var len = aLen > bLen ? aLen : bLen
	    var shuffle = []
	    var freeIndex = 0
	    var i = 0
	    var moveIndex = 0
	    var moves = {}
	    var removes = moves.removes = {}
	    var reverse = moves.reverse = {}
	    var hasMoves = false

	    while (freeIndex < len) {
	        var move = aMatch[i]
	        if (move !== undefined) {
	            shuffle[i] = bChildren[move]
	            if (move !== moveIndex) {
	                moves[move] = moveIndex
	                reverse[moveIndex] = move
	                hasMoves = true
	            }
	            moveIndex++
	        } else if (i in aMatch) {
	            shuffle[i] = undefined
	            removes[i] = moveIndex++
	            hasMoves = true
	        } else {
	            while (bMatch[freeIndex] !== undefined) {
	                freeIndex++
	            }

	            if (freeIndex < len) {
	                var freeChild = bChildren[freeIndex]
	                if (freeChild) {
	                    shuffle[i] = freeChild
	                    if (freeIndex !== moveIndex) {
	                        hasMoves = true
	                        moves[freeIndex] = moveIndex
	                        reverse[moveIndex] = freeIndex
	                    }
	                    moveIndex++
	                }
	                freeIndex++
	            }
	        }
	        i++
	    }

	    if (hasMoves) {
	        shuffle.moves = moves
	    }

	    return shuffle
	}

	function keyIndex(children) {
	    var i, keys

	    for (i = 0; i < children.length; i++) {
	        var child = children[i]

	        if (child.key !== undefined) {
	            keys = keys || {}
	            keys[child.key] = i
	        }
	    }

	    return keys
	}

	function appendPatch(apply, patch) {
	    if (apply) {
	        if (isArray(apply)) {
	            apply.push(patch)
	        } else {
	            apply = [apply, patch]
	        }

	        return apply
	    } else {
	        return patch
	    }
	}


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* (ignored) */

/***/ }
/******/ ]);
module.exports = {
    virtualDOM: virtualDOM
};

},{"Prelude":35}],24:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Data_Function = require("Data.Function");
var Data_Html_Internal_VirtualDOM = require("Data.Html.Internal.VirtualDOM");
var Prelude = require("Prelude");

function createElementImpl(create, vtree){
  return function createElementImplEff(){
    return { vtree: vtree
           , node: create(vtree)
           }
  }
};

function createElementOptitionsImpl(create, opts, vtree){
  return function createElementImplEff(){
    return { vtree: vtree
           , node: create(vtree, opts)
           }
  }
};

function getNode(html){
  return function getNodeEff(){
    return html.node;
  }
};

function patchImpl(fn, next, html){
  return function patchImplEff(){
    var patch  = fn.diff(html.vtree, next);
    html.node  = fn.patch(html.node, patch);
    html.vtree = next;
  }
};
var patch = Data_Function.runFn3(patchImpl)(Data_Html_Internal_VirtualDOM.virtualDOM);
var createElementOptions = Data_Function.runFn3(createElementOptitionsImpl)(Data_Html_Internal_VirtualDOM.virtualDOM.create);
var createElement = Data_Function.runFn2(createElementImpl)(Data_Html_Internal_VirtualDOM.virtualDOM.create);
module.exports = {
    createElement: createElement, 
    createElementOptions: createElementOptions, 
    getNode: getNode, 
    patch: patch
};

},{"Data.Function":15,"Data.Html.Internal.VirtualDOM":23,"Prelude":35}],25:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Control_Extend = require("Control.Extend");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
function Nothing() {

};
Nothing.value = new Nothing();
function Just(value0) {
    this.value0 = value0;
};
Just.create = function (value0) {
    return new Just(value0);
};
var showMaybe = function (__dict_Show_0) {
    return new Prelude.Show(function (_90) {
        if (_90 instanceof Just) {
            return "Just (" + (Prelude.show(__dict_Show_0)(_90.value0) + ")");
        };
        if (_90 instanceof Nothing) {
            return "Nothing";
        };
        throw new Error("Failed pattern match");
    });
};
var semigroupMaybe = function (__dict_Semigroup_1) {
    return new Prelude.Semigroup(function (_88) {
        return function (_89) {
            if (_88 instanceof Nothing) {
                return _89;
            };
            if (_89 instanceof Nothing) {
                return _88;
            };
            if (_88 instanceof Just && _89 instanceof Just) {
                return new Just(Prelude["<>"](__dict_Semigroup_1)(_88.value0)(_89.value0));
            };
            throw new Error("Failed pattern match");
        };
    });
};
var maybe = function (_75) {
    return function (_76) {
        return function (_77) {
            if (_77 instanceof Nothing) {
                return _75;
            };
            if (_77 instanceof Just) {
                return _76(_77.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var isNothing = maybe(true)(Prelude["const"](false));
var isJust = maybe(false)(Prelude["const"](true));
var functorMaybe = new Prelude.Functor(function (_78) {
    return function (_79) {
        if (_79 instanceof Just) {
            return new Just(_78(_79.value0));
        };
        return Nothing.value;
    };
});
var fromMaybe = function (a) {
    return maybe(a)(Prelude.id(Prelude.categoryArr));
};
var extendMaybe = new Control_Extend.Extend(function (_86) {
    return function (_87) {
        if (_87 instanceof Nothing) {
            return Nothing.value;
        };
        return Just.create(_86(_87));
    };
}, function () {
    return functorMaybe;
});
var eqMaybe = function (__dict_Eq_3) {
    return new Prelude.Eq(function (a) {
        return function (b) {
            return !Prelude["=="](eqMaybe(__dict_Eq_3))(a)(b);
        };
    }, function (_91) {
        return function (_92) {
            if (_91 instanceof Nothing && _92 instanceof Nothing) {
                return true;
            };
            if (_91 instanceof Just && _92 instanceof Just) {
                return Prelude["=="](__dict_Eq_3)(_91.value0)(_92.value0);
            };
            return false;
        };
    });
};
var ordMaybe = function (__dict_Ord_2) {
    return new Prelude.Ord(function () {
        return eqMaybe(__dict_Ord_2["__superclass_Prelude.Eq_0"]());
    }, function (_93) {
        return function (_94) {
            if (_93 instanceof Just && _94 instanceof Just) {
                return Prelude.compare(__dict_Ord_2)(_93.value0)(_94.value0);
            };
            if (_93 instanceof Nothing && _94 instanceof Nothing) {
                return Prelude.EQ.value;
            };
            if (_93 instanceof Nothing) {
                return Prelude.LT.value;
            };
            if (_94 instanceof Nothing) {
                return Prelude.GT.value;
            };
            throw new Error("Failed pattern match");
        };
    });
};
var applyMaybe = new Prelude.Apply(function (_80) {
    return function (_81) {
        if (_80 instanceof Just) {
            return Prelude["<$>"](functorMaybe)(_80.value0)(_81);
        };
        if (_80 instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return functorMaybe;
});
var bindMaybe = new Prelude.Bind(function (_84) {
    return function (_85) {
        if (_84 instanceof Just) {
            return _85(_84.value0);
        };
        if (_84 instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return applyMaybe;
});
var applicativeMaybe = new Prelude.Applicative(function () {
    return applyMaybe;
}, Just.create);
var monadMaybe = new Prelude.Monad(function () {
    return applicativeMaybe;
}, function () {
    return bindMaybe;
});
var altMaybe = new Control_Alt.Alt(function (_82) {
    return function (_83) {
        if (_82 instanceof Nothing) {
            return _83;
        };
        return _82;
    };
}, function () {
    return functorMaybe;
});
var plusMaybe = new Control_Plus.Plus(function () {
    return altMaybe;
}, Nothing.value);
var alternativeMaybe = new Control_Alternative.Alternative(function () {
    return plusMaybe;
}, function () {
    return applicativeMaybe;
});
var monadPlusMaybe = new Control_MonadPlus.MonadPlus(function () {
    return alternativeMaybe;
}, function () {
    return monadMaybe;
});
module.exports = {
    Just: Just, 
    Nothing: Nothing, 
    altMaybe: altMaybe, 
    alternativeMaybe: alternativeMaybe, 
    applicativeMaybe: applicativeMaybe, 
    applyMaybe: applyMaybe, 
    bindMaybe: bindMaybe, 
    eqMaybe: eqMaybe, 
    extendMaybe: extendMaybe, 
    fromMaybe: fromMaybe, 
    functorMaybe: functorMaybe, 
    isJust: isJust, 
    isNothing: isNothing, 
    maybe: maybe, 
    monadMaybe: monadMaybe, 
    monadPlusMaybe: monadPlusMaybe, 
    ordMaybe: ordMaybe, 
    plusMaybe: plusMaybe, 
    semigroupMaybe: semigroupMaybe, 
    showMaybe: showMaybe
};

},{"Control.Alt":1,"Control.Alternative":2,"Control.Extend":5,"Control.MonadPlus":9,"Control.Plus":10,"Prelude":35}],26:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var First = {
    create: function (value) {
        return value;
    }
};
var showFirst = function (__dict_Show_0) {
    return new Prelude.Show(function (_207) {
        return "First (" + (Prelude.show(Data_Maybe.showMaybe(__dict_Show_0))(_207) + ")");
    });
};
var semigroupFirst = new Prelude.Semigroup(function (_208) {
    return function (_209) {
        if (_208 instanceof Data_Maybe.Just) {
            return _208;
        };
        return _209;
    };
});
var runFirst = function (_200) {
    return _200;
};
var monoidFirst = new Data_Monoid.Monoid(function () {
    return semigroupFirst;
}, Data_Maybe.Nothing.value);
var eqFirst = function (__dict_Eq_2) {
    return new Prelude.Eq(function (_203) {
        return function (_204) {
            return Prelude["/="](Data_Maybe.eqMaybe(__dict_Eq_2))(_203)(_204);
        };
    }, function (_201) {
        return function (_202) {
            return Prelude["=="](Data_Maybe.eqMaybe(__dict_Eq_2))(_201)(_202);
        };
    });
};
var ordFirst = function (__dict_Ord_1) {
    return new Prelude.Ord(function () {
        return eqFirst(__dict_Ord_1["__superclass_Prelude.Eq_0"]());
    }, function (_205) {
        return function (_206) {
            return Prelude.compare(Data_Maybe.ordMaybe(__dict_Ord_1))(_205)(_206);
        };
    });
};
module.exports = {
    First: First, 
    eqFirst: eqFirst, 
    monoidFirst: monoidFirst, 
    ordFirst: ordFirst, 
    runFirst: runFirst, 
    semigroupFirst: semigroupFirst, 
    showFirst: showFirst
};

},{"Data.Maybe":25,"Data.Monoid":27,"Prelude":35}],27:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");
var Data_Array = require("Data.Array");
function Monoid(__superclass_Prelude$dotSemigroup_0, mempty) {
    this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
    this.mempty = mempty;
};
var monoidUnit = new Monoid(function () {
    return Prelude.semigroupUnit;
}, Prelude.unit);
var monoidString = new Monoid(function () {
    return Prelude.semigroupString;
}, "");
var monoidMaybe = function (__dict_Semigroup_0) {
    return new Monoid(function () {
        return Data_Maybe.semigroupMaybe(__dict_Semigroup_0);
    }, Data_Maybe.Nothing.value);
};
var monoidArray = new Monoid(function () {
    return Data_Array.semigroupArray;
}, [  ]);
var mempty = function (dict) {
    return dict.mempty;
};
var monoidArr = function (__dict_Monoid_1) {
    return new Monoid(function () {
        return Prelude.semigroupArr(__dict_Monoid_1["__superclass_Prelude.Semigroup_0"]());
    }, Prelude["const"](mempty(__dict_Monoid_1)));
};
module.exports = {
    Monoid: Monoid, 
    mempty: mempty, 
    monoidArr: monoidArr, 
    monoidArray: monoidArray, 
    monoidMaybe: monoidMaybe, 
    monoidString: monoidString, 
    monoidUnit: monoidUnit
};

},{"Data.Array":11,"Data.Maybe":25,"Prelude":35}],28:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");

    function charCodeAt(i) {
      return function(s) {
        return s.charCodeAt(i);
      };
    }
    ;

    function charAt(i) {
      return function(s) {
        return s.charAt(i);
      };
    }
    ;
module.exports = {
    charAt: charAt, 
    charCodeAt: charCodeAt
};

},{"Prelude":35}],29:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Data_Function = require("Data.Function");
var Data_Char = require("Data.Char");
var Data_String_Unsafe = require("Data.String.Unsafe");
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");

    function _charAt(i, s, Just, Nothing) {
      return i >= 0 && i < s.length ? Just(s.charAt(i)) : Nothing;
    }
    ;

    function _charCodeAt(i, s, Just, Nothing) {
      return i >= 0 && i < s.length ? Just(s.charCodeAt(i)) : Nothing;
    }
    ;

    function fromCharArray(a) {
      return a.join('');
    }
    ;

    function indexOf(x) {
      return function(s) {
        return s.indexOf(x);
      };
    }
    ;

    function indexOf$prime(x) {
      return function(startAt) {
        return function(s) {
          return s.indexOf(x, startAt);
        };
      };
    }
    ;

    function lastIndexOf(x) {
      return function(s) {
        return s.lastIndexOf(x);
      };
    }
    ;

    function lastIndexOf$prime(x) {
      return function(startAt) {
        return function(s) {
          return s.lastIndexOf(x, startAt);
        };
      };
    }
    ;

    function length(s) {
      return s.length;
    }
    ;

    function localeCompare(s1) {
      return function(s2) {
        return s1.localeCompare(s2);
      };
    }
    ;

    function replace(s1) {
      return function(s2) {
        return function(s3) {
          return s3.replace(s1, s2);
        };
      };
    }
    ;

    function take(n) {
      return function(s) {
        return s.substr(0, n);
      };
    }
    ;

    function drop(n) {
      return function(s) {
        return s.substr(n);
      };
    }
    ;

    function count(p){      
      return function(s){
        var i;
        for(i = 0; i < s.length && p(s.charAt(i)); i++){};
        return i;
      };      
    }
    ;

    function split(sep) {
      return function(s) {
        return s.split(sep);
      };
    }
    ;

    function toCharArray(s) {
      return s.split('');
    }
    ;

    function toLower(s) {
      return s.toLowerCase();
    }
    ;

    function toUpper(s) {
      return s.toUpperCase();
    }
    ;

    function trim(s) {
      return s.trim();
    }
    ;

    function joinWith(s) {
      return function(xs) {
        return xs.join(s);
      };
    }
    ;
var takeWhile = function (p) {
    return function (s) {
        return take(count(p)(s))(s);
    };
};
var $$null = function (s) {
    return length(s) === 0;
};
var uncons = function (_220) {
    if ($$null(_220)) {
        return Data_Maybe.Nothing.value;
    };
    return new Data_Maybe.Just({
        head: Data_String_Unsafe.charAt(0)(_220), 
        tail: drop(1)(_220)
    });
};
var fromChar = Data_Char.charString;
var singleton = fromChar;
var dropWhile = function (p) {
    return function (s) {
        return drop(count(p)(s))(s);
    };
};
var charCodeAt = function (n) {
    return function (s) {
        return _charCodeAt(n, s, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
    };
};
var charAt = function (n) {
    return function (s) {
        return _charAt(n, s, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
    };
};
module.exports = {
    charAt: charAt, 
    charCodeAt: charCodeAt, 
    count: count, 
    drop: drop, 
    dropWhile: dropWhile, 
    fromChar: fromChar, 
    fromCharArray: fromCharArray, 
    indexOf: indexOf, 
    "indexOf'": indexOf$prime, 
    joinWith: joinWith, 
    lastIndexOf: lastIndexOf, 
    "lastIndexOf'": lastIndexOf$prime, 
    length: length, 
    localeCompare: localeCompare, 
    "null": $$null, 
    replace: replace, 
    singleton: singleton, 
    split: split, 
    take: take, 
    takeWhile: takeWhile, 
    toCharArray: toCharArray, 
    toLower: toLower, 
    toUpper: toUpper, 
    trim: trim, 
    uncons: uncons
};

},{"Data.Char":12,"Data.Function":15,"Data.Maybe":25,"Data.String.Unsafe":28,"Prelude":35}],30:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Data_Monoid = require("Data.Monoid");
var Control_Lazy = require("Control.Lazy");
var Data_Array = require("Data.Array");
var Control_Extend = require("Control.Extend");
var Control_Comonad = require("Control.Comonad");
function Tuple(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
Tuple.create = function (value0) {
    return function (value1) {
        return new Tuple(value0, value1);
    };
};
var zip = Data_Array.zipWith(Tuple.create);
var unzip = function (_172) {
    if (_172.length >= 1) {
        var _503 = _172.slice(1);
        var _497 = unzip(_503);
        return new Tuple(Prelude[":"]((_172[0]).value0)(_497.value0), Prelude[":"]((_172[0]).value1)(_497.value1));
    };
    if (_172.length === 0) {
        return new Tuple([  ], [  ]);
    };
    throw new Error("Failed pattern match");
};
var uncurry = function (_170) {
    return function (_171) {
        return _170(_171.value0)(_171.value1);
    };
};
var swap = function (_173) {
    return new Tuple(_173.value1, _173.value0);
};
var snd = function (_169) {
    return _169.value1;
};
var showTuple = function (__dict_Show_0) {
    return function (__dict_Show_1) {
        return new Prelude.Show(function (_174) {
            return "Tuple (" + (Prelude.show(__dict_Show_0)(_174.value0) + (") (" + (Prelude.show(__dict_Show_1)(_174.value1) + ")")));
        });
    };
};
var semigroupoidTuple = new Prelude.Semigroupoid(function (_179) {
    return function (_180) {
        return new Tuple(_180.value0, _179.value1);
    };
});
var semigroupTuple = function (__dict_Semigroup_2) {
    return function (__dict_Semigroup_3) {
        return new Prelude.Semigroup(function (_181) {
            return function (_182) {
                return new Tuple(Prelude["<>"](__dict_Semigroup_2)(_181.value0)(_182.value0), Prelude["<>"](__dict_Semigroup_3)(_181.value1)(_182.value1));
            };
        });
    };
};
var monoidTuple = function (__dict_Monoid_6) {
    return function (__dict_Monoid_7) {
        return new Data_Monoid.Monoid(function () {
            return semigroupTuple(__dict_Monoid_6["__superclass_Prelude.Semigroup_0"]())(__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]());
        }, new Tuple(Data_Monoid.mempty(__dict_Monoid_6), Data_Monoid.mempty(__dict_Monoid_7)));
    };
};
var functorTuple = new Prelude.Functor(function (_183) {
    return function (_184) {
        return new Tuple(_184.value0, _183(_184.value1));
    };
});
var fst = function (_168) {
    return _168.value0;
};
var lazyLazy1Tuple = function (__dict_Lazy1_9) {
    return function (__dict_Lazy1_10) {
        return new Control_Lazy.Lazy(function (f) {
            return new Tuple(Control_Lazy.defer1(__dict_Lazy1_9)(function (_) {
                return fst(f(Prelude.unit));
            }), Control_Lazy.defer1(__dict_Lazy1_10)(function (_) {
                return snd(f(Prelude.unit));
            }));
        });
    };
};
var lazyLazy2Tuple = function (__dict_Lazy2_11) {
    return function (__dict_Lazy2_12) {
        return new Control_Lazy.Lazy(function (f) {
            return new Tuple(Control_Lazy.defer2(__dict_Lazy2_11)(function (_) {
                return fst(f(Prelude.unit));
            }), Control_Lazy.defer2(__dict_Lazy2_12)(function (_) {
                return snd(f(Prelude.unit));
            }));
        });
    };
};
var lazyTuple = function (__dict_Lazy_13) {
    return function (__dict_Lazy_14) {
        return new Control_Lazy.Lazy(function (f) {
            return new Tuple(Control_Lazy.defer(__dict_Lazy_13)(function (_) {
                return fst(f(Prelude.unit));
            }), Control_Lazy.defer(__dict_Lazy_14)(function (_) {
                return snd(f(Prelude.unit));
            }));
        });
    };
};
var extendTuple = new Control_Extend.Extend(function (_189) {
    return function (_190) {
        return new Tuple(_190.value0, _189(_190));
    };
}, function () {
    return functorTuple;
});
var eqTuple = function (__dict_Eq_15) {
    return function (__dict_Eq_16) {
        return new Prelude.Eq(function (t1) {
            return function (t2) {
                return !Prelude["=="](eqTuple(__dict_Eq_15)(__dict_Eq_16))(t1)(t2);
            };
        }, function (_175) {
            return function (_176) {
                return Prelude["=="](__dict_Eq_15)(_175.value0)(_176.value0) && Prelude["=="](__dict_Eq_16)(_175.value1)(_176.value1);
            };
        });
    };
};
var ordTuple = function (__dict_Ord_4) {
    return function (__dict_Ord_5) {
        return new Prelude.Ord(function () {
            return eqTuple(__dict_Ord_4["__superclass_Prelude.Eq_0"]())(__dict_Ord_5["__superclass_Prelude.Eq_0"]());
        }, function (_177) {
            return function (_178) {
                var _548 = Prelude.compare(__dict_Ord_4)(_177.value0)(_178.value0);
                if (_548 instanceof Prelude.EQ) {
                    return Prelude.compare(__dict_Ord_5)(_177.value1)(_178.value1);
                };
                return _548;
            };
        });
    };
};
var curry = function (f) {
    return function (a) {
        return function (b) {
            return f(new Tuple(a, b));
        };
    };
};
var comonadTuple = new Control_Comonad.Comonad(function () {
    return extendTuple;
}, snd);
var applyTuple = function (__dict_Semigroup_18) {
    return new Prelude.Apply(function (_185) {
        return function (_186) {
            return new Tuple(Prelude["<>"](__dict_Semigroup_18)(_185.value0)(_186.value0), _185.value1(_186.value1));
        };
    }, function () {
        return functorTuple;
    });
};
var bindTuple = function (__dict_Semigroup_17) {
    return new Prelude.Bind(function (_187) {
        return function (_188) {
            var _561 = _188(_187.value1);
            return new Tuple(Prelude["<>"](__dict_Semigroup_17)(_187.value0)(_561.value0), _561.value1);
        };
    }, function () {
        return applyTuple(__dict_Semigroup_17);
    });
};
var applicativeTuple = function (__dict_Monoid_19) {
    return new Prelude.Applicative(function () {
        return applyTuple(__dict_Monoid_19["__superclass_Prelude.Semigroup_0"]());
    }, Tuple.create(Data_Monoid.mempty(__dict_Monoid_19)));
};
var monadTuple = function (__dict_Monoid_8) {
    return new Prelude.Monad(function () {
        return applicativeTuple(__dict_Monoid_8);
    }, function () {
        return bindTuple(__dict_Monoid_8["__superclass_Prelude.Semigroup_0"]());
    });
};
module.exports = {
    Tuple: Tuple, 
    applicativeTuple: applicativeTuple, 
    applyTuple: applyTuple, 
    bindTuple: bindTuple, 
    comonadTuple: comonadTuple, 
    curry: curry, 
    eqTuple: eqTuple, 
    extendTuple: extendTuple, 
    fst: fst, 
    functorTuple: functorTuple, 
    lazyLazy1Tuple: lazyLazy1Tuple, 
    lazyLazy2Tuple: lazyLazy2Tuple, 
    lazyTuple: lazyTuple, 
    monadTuple: monadTuple, 
    monoidTuple: monoidTuple, 
    ordTuple: ordTuple, 
    semigroupTuple: semigroupTuple, 
    semigroupoidTuple: semigroupoidTuple, 
    showTuple: showTuple, 
    snd: snd, 
    swap: swap, 
    uncurry: uncurry, 
    unzip: unzip, 
    zip: zip
};

},{"Control.Comonad":4,"Control.Extend":5,"Control.Lazy":6,"Data.Array":11,"Data.Monoid":27,"Prelude":35}],31:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");

var kefir =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! Kefir.js v0.4.2
	 *  https://github.com/pozadi/kefir
	 */
	;(function(global){
	  "use strict";

	  var Kefir = {};


	function and() {
	  for (var i = 0; i < arguments.length; i++) {
	    if (!arguments[i]) {
	      return arguments[i];
	    }
	  }
	  return arguments[i - 1];
	}

	function or() {
	  for (var i = 0; i < arguments.length; i++) {
	    if (arguments[i]) {
	      return arguments[i];
	    }
	  }
	  return arguments[i - 1];
	}

	function not(x) {
	  return !x;
	}

	function concat(a, b) {
	  var result, length, i, j;
	  if (a.length === 0) {  return b  }
	  if (b.length === 0) {  return a  }
	  j = 0;
	  result = new Array(a.length + b.length);
	  length = a.length;
	  for (i = 0; i < length; i++, j++) {
	    result[j] = a[i];
	  }
	  length = b.length;
	  for (i = 0; i < length; i++, j++) {
	    result[j] = b[i];
	  }
	  return result;
	}

	function find(arr, value) {
	  var length = arr.length
	    , i;
	  for (i = 0; i < length; i++) {
	    if (arr[i] === value) {  return i  }
	  }
	  return -1;
	}

	function findByPred(arr, pred) {
	  var length = arr.length
	    , i;
	  for (i = 0; i < length; i++) {
	    if (pred(arr[i])) {  return i  }
	  }
	  return -1;
	}

	function cloneArray(input) {
	  var length = input.length
	    , result = new Array(length)
	    , i;
	  for (i = 0; i < length; i++) {
	    result[i] = input[i];
	  }
	  return result;
	}

	function remove(input, index) {
	  var length = input.length
	    , result, i, j;
	  if (index >= 0 && index < length) {
	    if (length === 1) {
	      return [];
	    } else {
	      result = new Array(length - 1);
	      for (i = 0, j = 0; i < length; i++) {
	        if (i !== index) {
	          result[j] = input[i];
	          j++;
	        }
	      }
	      return result;
	    }
	  } else {
	    return input;
	  }
	}

	function removeByPred(input, pred) {
	  return remove(input, findByPred(input, pred));
	}

	function map(input, fn) {
	  var length = input.length
	    , result = new Array(length)
	    , i;
	  for (i = 0; i < length; i++) {
	    result[i] = fn(input[i]);
	  }
	  return result;
	}

	function forEach(arr, fn) {
	  var length = arr.length
	    , i;
	  for (i = 0; i < length; i++) {  fn(arr[i])  }
	}

	function fillArray(arr, value) {
	  var length = arr.length
	    , i;
	  for (i = 0; i < length; i++) {
	    arr[i] = value;
	  }
	}

	function contains(arr, value) {
	  return find(arr, value) !== -1;
	}

	function rest(arr, start, onEmpty) {
	  if (arr.length > start) {
	    return Array.prototype.slice.call(arr, start);
	  }
	  return onEmpty;
	}

	function slide(cur, next, max) {
	  var length = Math.min(max, cur.length + 1),
	      offset = cur.length - length + 1,
	      result = new Array(length),
	      i;
	  for (i = offset; i < length; i++) {
	    result[i - offset] = cur[i];
	  }
	  result[length - 1] = next;
	  return result;
	}

	function isEqualArrays(a, b) {
	  var length, i;
	  if (a == null && b == null) {
	    return true;
	  }
	  if (a == null || b == null) {
	    return false;
	  }
	  if (a.length !== b.length) {
	    return false;
	  }
	  for (i = 0, length = a.length; i < length; i++) {
	    if (a[i] !== b[i]) {
	      return false;
	    }
	  }
	  return true;
	}

	function spread(fn, length) {
	  switch(length) {
	    case 0:  return function(a) {  return fn()  };
	    case 1:  return function(a) {  return fn(a[0])  };
	    case 2:  return function(a) {  return fn(a[0], a[1])  };
	    case 3:  return function(a) {  return fn(a[0], a[1], a[2])  };
	    case 4:  return function(a) {  return fn(a[0], a[1], a[2], a[3])  };
	    default: return function(a) {  return fn.apply(null, a)  };
	  }
	}

	function apply(fn, c, a) {
	  var aLength = a ? a.length : 0;
	  if (c == null) {
	    switch (aLength) {
	      case 0:  return fn();
	      case 1:  return fn(a[0]);
	      case 2:  return fn(a[0], a[1]);
	      case 3:  return fn(a[0], a[1], a[2]);
	      case 4:  return fn(a[0], a[1], a[2], a[3]);
	      default: return fn.apply(null, a);
	    }
	  } else {
	    switch (aLength) {
	      case 0:  return fn.call(c);
	      default: return fn.apply(c, a);
	    }
	  }
	}

	function get(map, key, notFound) {
	  if (map && key in map) {
	    return map[key];
	  } else {
	    return notFound;
	  }
	}

	function own(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	function createObj(proto) {
	  var F = function() {};
	  F.prototype = proto;
	  return new F();
	}

	function extend(target /*, mixin1, mixin2...*/) {
	  var length = arguments.length
	    , i, prop;
	  for (i = 1; i < length; i++) {
	    for (prop in arguments[i]) {
	      target[prop] = arguments[i][prop];
	    }
	  }
	  return target;
	}

	function inherit(Child, Parent /*, mixin1, mixin2...*/) {
	  var length = arguments.length
	    , i;
	  Child.prototype = createObj(Parent.prototype);
	  Child.prototype.constructor = Child;
	  for (i = 2; i < length; i++) {
	    extend(Child.prototype, arguments[i]);
	  }
	  return Child;
	}

	var NOTHING = ['<nothing>'];
	var END = 'end';
	var VALUE = 'value';
	var ANY = 'any';

	function noop() {}

	function id(x) {
	  return x;
	}

	function strictEqual(a, b) {
	  return a === b;
	}

	function defaultDiff(a, b) {
	  return [a, b]
	}

	var now = Date.now ?
	  function() { return Date.now() } :
	  function() { return new Date().getTime() };

	function isFn(fn) {
	  return typeof fn === 'function';
	}

	function isUndefined(x) {
	  return typeof x === 'undefined';
	}

	function isArrayLike(xs) {
	  return isArray(xs) || isArguments(xs);
	}

	var isArray = Array.isArray || function(xs) {
	  return Object.prototype.toString.call(xs) === '[object Array]';
	}

	var isArguments = function(xs) {
	  return Object.prototype.toString.call(xs) === '[object Arguments]';
	}

	// For IE
	if (!isArguments(arguments)) {
	  isArguments = function(obj) {
	    return !!(obj && own(obj, 'callee'));
	  }
	}

	function withInterval(name, mixin) {

	  function AnonymousStream(wait, args) {
	    Stream.call(this);
	    this._wait = wait;
	    this._intervalId = null;
	    var $ = this;
	    this._$onTick = function() {  $._onTick()  }
	    this._init(args);
	  }

	  inherit(AnonymousStream, Stream, {

	    _name: name,

	    _init: function(args) {},
	    _free: function() {},

	    _onTick: function() {},

	    _onActivation: function() {
	      this._intervalId = setInterval(this._$onTick, this._wait);
	    },
	    _onDeactivation: function() {
	      if (this._intervalId !== null) {
	        clearInterval(this._intervalId);
	        this._intervalId = null;
	      }
	    },

	    _clear: function() {
	      Stream.prototype._clear.call(this);
	      this._$onTick = null;
	      this._free();
	    }

	  }, mixin);

	  Kefir[name] = function(wait) {
	    return new AnonymousStream(wait, rest(arguments, 1, []));
	  }
	}

	function withOneSource(name, mixin, options) {


	  options = extend({
	    streamMethod: function(StreamClass, PropertyClass) {
	      return function() {  return new StreamClass(this, arguments)  }
	    },
	    propertyMethod: function(StreamClass, PropertyClass) {
	      return function() {  return new PropertyClass(this, arguments)  }
	    }
	  }, options || {});



	  mixin = extend({
	    _init: function(args) {},
	    _free: function() {},

	    _handleValue: function(x, isCurrent) {  this._send(VALUE, x, isCurrent)  },
	    _handleEnd: function(__, isCurrent) {  this._send(END, null, isCurrent)  },

	    _handleAny: function(event) {
	      switch (event.type) {
	        case VALUE: this._handleValue(event.value, event.current); break;
	        case END: this._handleEnd(event.value, event.current); break;
	      }
	    },

	    _onActivation: function() {
	      this._source.onAny(this._$handleAny);
	    },
	    _onDeactivation: function() {
	      this._source.offAny(this._$handleAny);
	    }
	  }, mixin || {});



	  function buildClass(BaseClass) {
	    function AnonymousObservable(source, args) {
	      BaseClass.call(this);
	      this._source = source;
	      this._name = source._name + '.' + name;
	      this._init(args);
	      var $ = this;
	      this._$handleAny = function(event) {  $._handleAny(event)  }
	    }

	    inherit(AnonymousObservable, BaseClass, {
	      _clear: function() {
	        BaseClass.prototype._clear.call(this);
	        this._source = null;
	        this._$handleAny = null;
	        this._free();
	      }
	    }, mixin);

	    return AnonymousObservable;
	  }


	  var AnonymousStream = buildClass(Stream);
	  var AnonymousProperty = buildClass(Property);

	  if (options.streamMethod) {
	    Stream.prototype[name] = options.streamMethod(AnonymousStream, AnonymousProperty);
	  }

	  if (options.propertyMethod) {
	    Property.prototype[name] = options.propertyMethod(AnonymousStream, AnonymousProperty);
	  }

	}

	function withTwoSources(name, mixin /*, options*/) {

	  mixin = extend({
	    _init: function(args) {},
	    _free: function() {},

	    _handlePrimaryValue: function(x, isCurrent) {  this._send(VALUE, x, isCurrent)  },
	    _handlePrimaryEnd: function(__, isCurrent) {  this._send(END, null, isCurrent)  },

	    _handleSecondaryValue: function(x, isCurrent) {  this._lastSecondary = x  },
	    _handleSecondaryEnd: function(__, isCurrent) {},

	    _handlePrimaryAny: function(event) {
	      switch (event.type) {
	        case VALUE: this._handlePrimaryValue(event.value, event.current); break;
	        case END: this._handlePrimaryEnd(event.value, event.current); break;
	      }
	    },
	    _handleSecondaryAny: function(event) {
	      switch (event.type) {
	        case VALUE:
	          this._handleSecondaryValue(event.value, event.current);
	          break;
	        case END:
	          this._handleSecondaryEnd(event.value, event.current);
	          this._removeSecondary();
	          break;
	      }
	    },

	    _removeSecondary: function() {
	      if (this._secondary !== null) {
	        this._secondary.offAny(this._$handleSecondaryAny);
	        this._$handleSecondaryAny = null;
	        this._secondary = null;
	      }
	    },

	    _onActivation: function() {
	      if (this._secondary !== null) {
	        this._secondary.onAny(this._$handleSecondaryAny);
	      }
	      if (this._alive) {
	        this._primary.onAny(this._$handlePrimaryAny);
	      }
	    },
	    _onDeactivation: function() {
	      if (this._secondary !== null) {
	        this._secondary.offAny(this._$handleSecondaryAny);
	      }
	      this._primary.offAny(this._$handlePrimaryAny);
	    }
	  }, mixin || {});



	  function buildClass(BaseClass) {
	    function AnonymousObservable(primary, secondary, args) {
	      BaseClass.call(this);
	      this._primary = primary;
	      this._secondary = secondary;
	      this._name = primary._name + '.' + name;
	      this._lastSecondary = NOTHING;
	      var $ = this;
	      this._$handleSecondaryAny = function(event) {  $._handleSecondaryAny(event)  }
	      this._$handlePrimaryAny = function(event) {  $._handlePrimaryAny(event)  }
	      this._init(args);
	    }

	    inherit(AnonymousObservable, BaseClass, {
	      _clear: function() {
	        BaseClass.prototype._clear.call(this);
	        this._primary = null;
	        this._secondary = null;
	        this._lastSecondary = null;
	        this._$handleSecondaryAny = null;
	        this._$handlePrimaryAny = null;
	        this._free();
	      }
	    }, mixin);

	    return AnonymousObservable;
	  }


	  var AnonymousStream = buildClass(Stream);
	  var AnonymousProperty = buildClass(Property);

	  Stream.prototype[name] = function(secondary) {
	    return new AnonymousStream(this, secondary, rest(arguments, 1, []));
	  }

	  Property.prototype[name] = function(secondary) {
	    return new AnonymousProperty(this, secondary, rest(arguments, 1, []));
	  }

	}

	// Subscribers

	function Subscribers() {
	  this._items = [];
	}

	extend(Subscribers, {
	  callOne: function(fnData, event) {
	    if (fnData.type === ANY) {
	      fnData.fn(event);
	    } else if (fnData.type === event.type) {
	      if (fnData.type === VALUE) {
	        fnData.fn(event.value);
	      } else {
	        fnData.fn();
	      }
	    }
	  },
	  callOnce: function(type, fn, event) {
	    if (type === ANY) {
	      fn(event);
	    } else if (type === event.type) {
	      if (type === VALUE) {
	        fn(event.value);
	      } else {
	        fn();
	      }
	    }
	  }
	});


	extend(Subscribers.prototype, {
	  add: function(type, fn, _key) {
	    this._items = concat(this._items, [{
	      type: type,
	      fn: fn,
	      key: _key || null
	    }]);
	  },
	  remove: function(type, fn, _key) {
	    var pred = isArray(_key) ?
	      function(fnData) {return fnData.type === type && isEqualArrays(fnData.key, _key)} :
	      function(fnData) {return fnData.type === type && fnData.fn === fn};
	    this._items = removeByPred(this._items, pred);
	  },
	  callAll: function(event) {
	    var items = this._items;
	    for (var i = 0; i < items.length; i++) {
	      Subscribers.callOne(items[i], event);
	    }
	  },
	  isEmpty: function() {
	    return this._items.length === 0;
	  }
	});





	// Events

	function Event(type, value, current) {
	  return {type: type, value: value, current: !!current};
	}

	var CURRENT_END = Event(END, undefined, true);





	// Observable

	function Observable() {
	  this._subscribers = new Subscribers();
	  this._active = false;
	  this._alive = true;
	}
	Kefir.Observable = Observable;

	extend(Observable.prototype, {

	  _name: 'observable',

	  _onActivation: function() {},
	  _onDeactivation: function() {},

	  _setActive: function(active) {
	    if (this._active !== active) {
	      this._active = active;
	      if (active) {
	        this._onActivation();
	      } else {
	        this._onDeactivation();
	      }
	    }
	  },

	  _clear: function() {
	    this._setActive(false);
	    this._alive = false;
	    this._subscribers = null;
	  },

	  _send: function(type, x, isCurrent) {
	    if (this._alive) {
	      this._subscribers.callAll(Event(type, x, isCurrent));
	      if (type === END) {  this._clear()  }
	    }
	  },

	  on: function(type, fn, _key) {
	    if (this._alive) {
	      this._subscribers.add(type, fn, _key);
	      this._setActive(true);
	    } else {
	      Subscribers.callOnce(type, fn, CURRENT_END);
	    }
	    return this;
	  },

	  off: function(type, fn, _key) {
	    if (this._alive) {
	      this._subscribers.remove(type, fn, _key);
	      if (this._subscribers.isEmpty()) {
	        this._setActive(false);
	      }
	    }
	    return this;
	  },

	  onValue:  function(fn, _key) {  return this.on(VALUE, fn, _key)   },
	  onEnd:    function(fn, _key) {  return this.on(END, fn, _key)     },
	  onAny:    function(fn, _key) {  return this.on(ANY, fn, _key)     },

	  offValue: function(fn, _key) {  return this.off(VALUE, fn, _key)  },
	  offEnd:   function(fn, _key) {  return this.off(END, fn, _key)    },
	  offAny:   function(fn, _key) {  return this.off(ANY, fn, _key)    }

	});


	// extend() can't handle `toString` in IE8
	Observable.prototype.toString = function() {  return '[' + this._name + ']'  };









	// Stream

	function Stream() {
	  Observable.call(this);
	}
	Kefir.Stream = Stream;

	inherit(Stream, Observable, {

	  _name: 'stream'

	});







	// Property

	function Property() {
	  Observable.call(this);
	  this._current = NOTHING;
	}
	Kefir.Property = Property;

	inherit(Property, Observable, {

	  _name: 'property',

	  _send: function(type, x, isCurrent) {
	    if (this._alive) {
	      if (!isCurrent) {
	        this._subscribers.callAll(Event(type, x));
	      }
	      if (type === VALUE) {  this._current = x  }
	      if (type === END) {  this._clear()  }
	    }
	  },

	  on: function(type, fn, _key) {
	    if (this._alive) {
	      this._subscribers.add(type, fn, _key);
	      this._setActive(true);
	    }
	    if (this._current !== NOTHING) {
	      Subscribers.callOnce(type, fn, Event(VALUE, this._current, true));
	    }
	    if (!this._alive) {
	      Subscribers.callOnce(type, fn, CURRENT_END);
	    }
	    return this;
	  }

	});






	// Log

	Observable.prototype.log = function(name) {
	  name = name || this.toString();
	  this.onAny(function(event) {
	    var typeStr = '<' + event.type + (event.current ? ':current' : '') + '>';
	    if (event.type === VALUE) {
	      console.log(name, typeStr, event.value);
	    } else {
	      console.log(name, typeStr);
	    }
	  }, ['__logKey__', this, name]);
	  return this;
	}

	Observable.prototype.offLog = function(name) {
	  name = name || this.toString();
	  this.offAny(null, ['__logKey__', this, name]);
	  return this;
	}



	// Kefir.withInterval()

	withInterval('withInterval', {
	  _init: function(args) {
	    this._fn = args[0];
	    var $ = this;
	    this._emitter = {
	      emit: function(x) {  $._send(VALUE, x)  },
	      end: function() {  $._send(END)  }
	    }
	  },
	  _free: function() {
	    this._fn = null;
	    this._emitter = null;
	  },
	  _onTick: function() {
	    this._fn(this._emitter);
	  }
	});





	// Kefir.fromPoll()

	withInterval('fromPoll', {
	  _init: function(args) {
	    this._fn = args[0];
	  },
	  _free: function() {
	    this._fn = null;
	  },
	  _onTick: function() {
	    this._send(VALUE, this._fn());
	  }
	});





	// Kefir.interval()

	withInterval('interval', {
	  _init: function(args) {
	    this._x = args[0];
	  },
	  _free: function() {
	    this._x = null;
	  },
	  _onTick: function() {
	    this._send(VALUE, this._x);
	  }
	});




	// Kefir.sequentially()

	withInterval('sequentially', {
	  _init: function(args) {
	    this._xs = cloneArray(args[0]);
	    if (this._xs.length === 0) {
	      this._send(END)
	    }
	  },
	  _free: function() {
	    this._xs = null;
	  },
	  _onTick: function() {
	    switch (this._xs.length) {
	      case 1:
	        this._send(VALUE, this._xs[0]);
	        this._send(END);
	        break;
	      default:
	        this._send(VALUE, this._xs.shift());
	    }
	  }
	});




	// Kefir.repeatedly()

	withInterval('repeatedly', {
	  _init: function(args) {
	    this._xs = cloneArray(args[0]);
	    this._i = -1;
	  },
	  _onTick: function() {
	    if (this._xs.length > 0) {
	      this._i = (this._i + 1) % this._xs.length;
	      this._send(VALUE, this._xs[this._i]);
	    }
	  }
	});





	// Kefir.later()

	withInterval('later', {
	  _init: function(args) {
	    this._x = args[0];
	  },
	  _free: function() {
	    this._x = null;
	  },
	  _onTick: function() {
	    this._send(VALUE, this._x);
	    this._send(END);
	  }
	});

	function _AbstractPool(options) {
	  Stream.call(this);

	  this._queueLim = get(options, 'queueLim', 0);
	  this._concurLim = get(options, 'concurLim', -1);
	  this._drop = get(options, 'drop', 'new');
	  if (this._concurLim === 0) {
	    throw new Error('options.concurLim can\'t be 0');
	  }

	  var $ = this;
	  this._$handleSubAny = function(event) {  $._handleSubAny(event)  };

	  this._queue = [];
	  this._curSources = [];
	  this._activating = false;
	}

	inherit(_AbstractPool, Stream, {

	  _name: 'abstractPool',

	  _add: function(obj, toObs) {
	    toObs = toObs || id;
	    if (this._concurLim === -1 || this._curSources.length < this._concurLim) {
	      this._addToCur(toObs(obj));
	    } else {
	      if (this._queueLim === -1 || this._queue.length < this._queueLim) {
	        this._addToQueue(toObs(obj));
	      } else if (this._drop === 'old') {
	        this._removeOldest();
	        this._add(toObs(obj));
	      }
	    }
	  },
	  _addAll: function(obss) {
	    var $ = this;
	    forEach(obss, function(obs) {  $._add(obs)  });
	  },
	  _remove: function(obs) {
	    if (this._removeCur(obs) === -1) {
	      this._removeQueue(obs);
	    }
	  },

	  _addToQueue: function(obs) {
	    this._queue = concat(this._queue, [obs]);
	  },
	  _addToCur: function(obs) {
	    this._curSources = concat(this._curSources, [obs]);
	    if (this._active) {  this._sub(obs)  }
	  },
	  _sub: function(obs) {
	    var $ = this;
	    obs.onAny(this._$handleSubAny);
	    obs.onEnd(function() {  $._removeCur(obs)  }, [this, obs]);
	  },
	  _unsub: function(obs) {
	    obs.offAny(this._$handleSubAny);
	    obs.offEnd(null, [this, obs]);
	  },
	  _handleSubAny: function(event) {
	    if (event.type === VALUE) {
	      this._send(VALUE, event.value, event.current && this._activating);
	    }
	  },

	  _removeQueue: function(obs) {
	    var index = find(this._queue, obs);
	    this._queue = remove(this._queue, index);
	    return index;
	  },
	  _removeCur: function(obs) {
	    if (this._active) {  this._unsub(obs)  }
	    var index = find(this._curSources, obs);
	    this._curSources = remove(this._curSources, index);
	    if (index !== -1) {
	      if (this._queue.length !== 0) {
	        this._pullQueue();
	      } else if (this._curSources.length === 0) {
	        this._onEmpty();
	      }
	    }
	    return index;
	  },
	  _removeOldest: function() {
	    this._removeCur(this._curSources[0]);
	  },

	  _pullQueue: function() {
	    if (this._queue.length !== 0) {
	      this._queue = cloneArray(this._queue);
	      this._addToCur(this._queue.shift());
	    }
	  },

	  _onActivation: function() {
	    var sources = this._curSources
	      , i;
	    this._activating = true;
	    for (i = 0; i < sources.length; i++) {  this._sub(sources[i])  }
	    this._activating = false;
	  },
	  _onDeactivation: function() {
	    var sources = this._curSources
	      , i;
	    for (i = 0; i < sources.length; i++) {  this._unsub(sources[i])  }
	  },

	  _isEmpty: function() {  return this._curSources.length === 0  },
	  _onEmpty: function() {},

	  _clear: function() {
	    Stream.prototype._clear.call(this);
	    this._queue = null;
	    this._curSources = null;
	    this._$handleSubAny = null;
	  }

	});





	// .merge()

	var MergeLike = {
	  _onEmpty: function() {
	    if (this._initialised) {  this._send(END, null, this._activating)  }
	  }
	};

	function Merge(sources) {
	  _AbstractPool.call(this);
	  if (sources.length === 0) {  this._send(END)  } else {  this._addAll(sources)  }
	  this._initialised = true;
	}

	inherit(Merge, _AbstractPool, extend({_name: 'merge'}, MergeLike));

	Kefir.merge = function(obss) {
	  return new Merge(obss);
	}

	Observable.prototype.merge = function(other) {
	  return Kefir.merge([this, other]);
	}




	// .concat()

	function Concat(sources) {
	  _AbstractPool.call(this, {concurLim: 1, queueLim: -1});
	  if (sources.length === 0) {  this._send(END)  } else {  this._addAll(sources)  }
	  this._initialised = true;
	}

	inherit(Concat, _AbstractPool, extend({_name: 'concat'}, MergeLike));

	Kefir.concat = function(obss) {
	  return new Concat(obss);
	}

	Observable.prototype.concat = function(other) {
	  return Kefir.concat([this, other]);
	}






	// .pool()

	function Pool() {
	  _AbstractPool.call(this);
	}

	inherit(Pool, _AbstractPool, {

	  _name: 'pool',

	  plug: function(obs) {
	    this._add(obs);
	    return this;
	  },
	  unplug: function(obs) {
	    this._remove(obs);
	    return this;
	  }

	});

	Kefir.pool = function() {
	  return new Pool();
	}





	// .bus()

	function Bus() {
	  _AbstractPool.call(this);
	}

	inherit(Bus, _AbstractPool, {

	  _name: 'bus',

	  plug: function(obs) {
	    this._add(obs);
	    return this;
	  },
	  unplug: function(obs) {
	    this._remove(obs);
	    return this;
	  },

	  emit: function(x) {
	    this._send(VALUE, x);
	    return this;
	  },
	  end: function() {
	    this._send(END);
	    return this;
	  }

	});

	Kefir.bus = function() {
	  return new Bus();
	}





	// .flatMap()

	function FlatMap(source, fn, options) {
	  _AbstractPool.call(this, options);
	  this._source = source;
	  this._fn = fn || id;
	  this._mainEnded = false;
	  this._lastCurrent = null;

	  var $ = this;
	  this._$handleMainSource = function(event) {  $._handleMainSource(event)  };
	}

	inherit(FlatMap, _AbstractPool, {

	  _onActivation: function() {
	    _AbstractPool.prototype._onActivation.call(this);
	    if (this._active) {
	      this._activating = true;
	      this._source.onAny(this._$handleMainSource);
	      this._activating = false;
	    }
	  },
	  _onDeactivation: function() {
	    _AbstractPool.prototype._onDeactivation.call(this);
	    this._source.offAny(this._$handleMainSource);
	  },

	  _handleMainSource: function(event) {
	    if (event.type === VALUE) {
	      if (!event.current || this._lastCurrent !== event.value) {
	        this._add(event.value, this._fn);
	      }
	      this._lastCurrent = event.value;
	    } else {
	      if (this._isEmpty()) {
	        this._send(END, null, event.current);
	      } else {
	        this._mainEnded = true;
	      }
	    }
	  },

	  _onEmpty: function() {
	    if (this._mainEnded) {  this._send(END)  }
	  },

	  _clear: function() {
	    _AbstractPool.prototype._clear.call(this);
	    this._source = null;
	    this._lastCurrent = null;
	    this._$handleMainSource = null;
	  }

	});

	Observable.prototype.flatMap = function(fn) {
	  return new FlatMap(this, fn)
	    .setName(this, 'flatMap');
	}

	Observable.prototype.flatMapLatest = function(fn) {
	  return new FlatMap(this, fn, {concurLim: 1, drop: 'old'})
	    .setName(this, 'flatMapLatest');
	}

	Observable.prototype.flatMapFirst = function(fn) {
	  return new FlatMap(this, fn, {concurLim: 1})
	    .setName(this, 'flatMapFirst');
	}

	Observable.prototype.flatMapConcat = function(fn) {
	  return new FlatMap(this, fn, {queueLim: -1, concurLim: 1})
	    .setName(this, 'flatMapConcat');
	}

	Observable.prototype.flatMapConcurLimit = function(fn, limit) {
	  var result;
	  if (limit === 0) {
	    result = Kefir.never();
	  } else {
	    if (limit < 0) {  limit = -1  }
	    result = new FlatMap(this, fn, {queueLim: -1, concurLim: limit});
	  }
	  return result.setName(this, 'flatMapConcurLimit');
	}






	// .zip()

	function Zip(sources, combinator) {
	  Stream.call(this);
	  if (sources.length === 0) {
	    this._send(END);
	  } else {
	    this._buffers = map(sources, function(source) {
	      return isArray(source) ? cloneArray(source) : [];
	    });
	    this._sources = map(sources, function(source) {
	      return isArray(source) ? Kefir.never() : source;
	    });
	    this._combinator = combinator ? spread(combinator, this._sources.length) : id;
	    this._aliveCount = 0;
	  }
	}

	function bind_Zip_handleAny($, i) {
	  return function(event) {  $._handleAny(i, event)  };
	}

	inherit(Zip, Stream, {

	  _name: 'zip',

	  _onActivation: function() {
	    var i, length = this._sources.length;
	    this._drainArrays();
	    this._aliveCount = length;
	    for (i = 0; i < length; i++) {
	      this._sources[i].onAny(bind_Zip_handleAny(this, i), [this, i]);
	    }
	  },

	  _onDeactivation: function() {
	    for (var i = 0; i < this._sources.length; i++) {
	      this._sources[i].offAny(null, [this, i]);
	    }
	  },

	  _emit: function(isCurrent) {
	    var values = new Array(this._buffers.length);
	    for (var i = 0; i < this._buffers.length; i++) {
	      values[i] = this._buffers[i].shift();
	    }
	    this._send(VALUE, this._combinator(values), isCurrent);
	  },

	  _isFull: function() {
	    for (var i = 0; i < this._buffers.length; i++) {
	      if (this._buffers[i].length === 0) {
	        return false;
	      }
	    }
	    return true;
	  },

	  _emitIfFull: function(isCurrent) {
	    if (this._isFull()) {
	      this._emit(isCurrent);
	    }
	  },

	  _drainArrays: function() {
	    while (this._isFull()) {
	      this._emit(true);
	    }
	  },

	  _handleAny: function(i, event) {
	    if (event.type === VALUE) {
	      this._buffers[i].push(event.value);
	      this._emitIfFull(event.current);
	    } else {
	      this._aliveCount--;
	      if (this._aliveCount === 0) {
	        this._send(END, null, event.current);
	      }
	    }
	  },

	  _clear: function() {
	    Stream.prototype._clear.call(this);
	    this._sources = null;
	    this._buffers = null;
	    this._combinator = null;
	  }

	});

	Kefir.zip = function(sources, combinator) {
	  return new Zip(sources, combinator);
	}

	Observable.prototype.zip = function(other, combinator) {
	  return new Zip([this, other], combinator);
	}






	// .sampledBy()

	function SampledBy(passive, active, combinator) {
	  Stream.call(this);
	  if (active.length === 0) {
	    this._send(END);
	  } else {
	    this._passiveCount = passive.length;
	    this._sources = concat(passive, active);
	    this._combinator = combinator ? spread(combinator, this._sources.length) : id;
	    this._aliveCount = 0;
	    this._currents = new Array(this._sources.length);
	    fillArray(this._currents, NOTHING);
	    this._activating = false;
	    this._emitAfterActivation = false;
	    this._endAfterActivation = false;
	  }
	}


	function bind_SampledBy_handleAny($, i) {
	  return function(event) {  $._handleAny(i, event)  };
	}

	inherit(SampledBy, Stream, {

	  _name: 'sampledBy',

	  _onActivation: function() {
	    var length = this._sources.length,
	        i;
	    this._aliveCount = length - this._passiveCount;
	    this._activating = true;
	    for (i = 0; i < length; i++) {
	      this._sources[i].onAny(bind_SampledBy_handleAny(this, i), [this, i]);
	    }
	    this._activating = false;
	    if (this._emitAfterActivation) {
	      this._emitAfterActivation = false;
	      this._emitIfFull(true);
	    }
	    if (this._endAfterActivation) {
	      this._send(END, null, true);
	    }
	  },

	  _onDeactivation: function() {
	    var length = this._sources.length,
	        i;
	    for (i = 0; i < length; i++) {
	      this._sources[i].offAny(null, [this, i]);
	    }
	  },

	  _emitIfFull: function(isCurrent) {
	    if (!contains(this._currents, NOTHING)) {
	      var combined = cloneArray(this._currents);
	      combined = this._combinator(combined);
	      this._send(VALUE, combined, isCurrent);
	    }
	  },

	  _handleAny: function(i, event) {
	    if (event.type === VALUE) {
	      this._currents[i] = event.value;
	      if (i >= this._passiveCount) {
	        if (this._activating) {
	          this._emitAfterActivation = true;
	        } else {
	          this._emitIfFull(event.current);
	        }
	      }
	    } else {
	      if (i >= this._passiveCount) {
	        this._aliveCount--;
	        if (this._aliveCount === 0) {
	          if (this._activating) {
	            this._endAfterActivation = true;
	          } else {
	            this._send(END, null, event.current);
	          }
	        }
	      }
	    }
	  },

	  _clear: function() {
	    Stream.prototype._clear.call(this);
	    this._sources = null;
	    this._currents = null;
	    this._combinator = null;
	  }

	});

	Kefir.sampledBy = function(passive, active, combinator) {
	  return new SampledBy(passive, active, combinator);
	}

	Observable.prototype.sampledBy = function(other, combinator) {
	  return Kefir.sampledBy([this], [other], combinator || id);
	}




	// .combine()

	Kefir.combine = function(sources, combinator) {
	  return new SampledBy([], sources, combinator).setName('combine');
	}

	Observable.prototype.combine = function(other, combinator) {
	  return Kefir.combine([this, other], combinator);
	}

	function produceStream(StreamClass, PropertyClass) {
	  return function() {  return new StreamClass(this, arguments)  }
	}
	function produceProperty(StreamClass, PropertyClass) {
	  return function() {  return new PropertyClass(this, arguments)  }
	}



	// .toProperty()

	withOneSource('toProperty', {
	  _init: function(args) {
	    if (args.length > 0) {
	      this._send(VALUE, args[0]);
	    }
	  }
	}, {propertyMethod: null, streamMethod: produceProperty});




	// .withDefault()

	withOneSource('withDefault', {
	  _init: function(args) {
	    this._send(VALUE, args[0], true);
	  }
	}, {propertyMethod: produceProperty, streamMethod: produceProperty});




	// .changes()

	withOneSource('changes', {
	  _handleValue: function(x, isCurrent) {
	    if (!isCurrent) {
	      this._send(VALUE, x);
	    }
	  }
	}, {streamMethod: null, propertyMethod: produceStream});




	// .withHandler()

	withOneSource('withHandler', {
	  _init: function(args) {
	    this._handler = args[0];
	    this._forcedCurrent = false;
	    var $ = this;
	    this._emitter = {
	      emit: function(x) {  $._send(VALUE, x, $._forcedCurrent)  },
	      end: function() {  $._send(END, null, $._forcedCurrent)  }
	    }
	  },
	  _free: function() {
	    this._handler = null;
	    this._emitter = null;
	  },
	  _handleAny: function(event) {
	    this._forcedCurrent = event.current;
	    this._handler(this._emitter, event);
	    this._forcedCurrent = false;
	  }
	});




	// .flatten(fn)

	withOneSource('flatten', {
	  _init: function(args) {
	    this._fn = args[0] ? args[0] : id;
	  },
	  _free: function() {
	    this._fn = null;
	  },
	  _handleValue: function(x, isCurrent) {
	    var xs = this._fn(x);
	    for (var i = 0; i < xs.length; i++) {
	      this._send(VALUE, xs[i], isCurrent);
	    }
	  }
	});







	// .transduce(transducer)

	function xformForObs(obs) {
	  return {
	    step: function(res, input) {
	      obs._send(VALUE, input, obs._forcedCurrent);
	      return null;
	    },
	    result: function(res) {
	      obs._send(END, null, obs._forcedCurrent);
	      return null;
	    }
	  };
	}

	withOneSource('transduce', {
	  _init: function(args) {
	    this._xform = args[0](xformForObs(this));
	  },
	  _free: function() {
	    this._xform = null;
	  },
	  _handleValue: function(x, isCurrent) {
	    this._forcedCurrent = isCurrent;
	    if (this._xform.step(null, x) !== null) {
	      this._xform.result(null);
	    }
	    this._forcedCurrent = false;
	  },
	  _handleEnd: function(__, isCurrent) {
	    this._forcedCurrent = isCurrent;
	    this._xform.result(null);
	    this._forcedCurrent = false;
	  }
	});





	var withFnArgMixin = {
	  _init: function(args) {  this._fn = args[0] || id  },
	  _free: function() {  this._fn = null  }
	};



	// .map(fn)

	withOneSource('map', extend({
	  _handleValue: function(x, isCurrent) {
	    this._send(VALUE, this._fn(x), isCurrent);
	  }
	}, withFnArgMixin));





	// .filter(fn)

	withOneSource('filter', extend({
	  _handleValue: function(x, isCurrent) {
	    if (this._fn(x)) {
	      this._send(VALUE, x, isCurrent);
	    }
	  }
	}, withFnArgMixin));





	// .takeWhile(fn)

	withOneSource('takeWhile', extend({
	  _handleValue: function(x, isCurrent) {
	    if (this._fn(x)) {
	      this._send(VALUE, x, isCurrent);
	    } else {
	      this._send(END, null, isCurrent);
	    }
	  }
	}, withFnArgMixin));





	// .take(n)

	withOneSource('take', {
	  _init: function(args) {
	    this._n = args[0];
	    if (this._n <= 0) {
	      this._send(END);
	    }
	  },
	  _handleValue: function(x, isCurrent) {
	    this._n--;
	    this._send(VALUE, x, isCurrent);
	    if (this._n === 0) {
	      this._send(END, null, isCurrent);
	    }
	  }
	});





	// .skip(n)

	withOneSource('skip', {
	  _init: function(args) {
	    this._n = Math.max(0, args[0]);
	  },
	  _handleValue: function(x, isCurrent) {
	    if (this._n === 0) {
	      this._send(VALUE, x, isCurrent);
	    } else {
	      this._n--;
	    }
	  }
	});




	// .skipDuplicates([fn])

	withOneSource('skipDuplicates', {
	  _init: function(args) {
	    this._fn = args[0] || strictEqual;
	    this._prev = NOTHING;
	  },
	  _free: function() {
	    this._fn = null;
	    this._prev = null;
	  },
	  _handleValue: function(x, isCurrent) {
	    if (this._prev === NOTHING || !this._fn(this._prev, x)) {
	      this._send(VALUE, x, isCurrent);
	      this._prev = x;
	    }
	  }
	});





	// .skipWhile(fn)

	withOneSource('skipWhile', {
	  _init: function(args) {
	    this._fn = args[0] || id;
	    this._skip = true;
	  },
	  _free: function() {
	    this._fn = null;
	  },
	  _handleValue: function(x, isCurrent) {
	    if (!this._skip) {
	      this._send(VALUE, x, isCurrent);
	      return;
	    }
	    if (!this._fn(x)) {
	      this._skip = false;
	      this._fn = null;
	      this._send(VALUE, x, isCurrent);
	    }
	  }
	});





	// .diff(fn, seed)

	withOneSource('diff', {
	  _init: function(args) {
	    this._fn = args[0] || defaultDiff;
	    this._prev = args.length > 1 ? args[1] : NOTHING;
	  },
	  _free: function() {
	    this._prev = null;
	    this._fn = null;
	  },
	  _handleValue: function(x, isCurrent) {
	    if (this._prev !== NOTHING) {
	      this._send(VALUE, this._fn(this._prev, x), isCurrent);
	    }
	    this._prev = x;
	  }
	});





	// .scan(fn, seed)

	withOneSource('scan', {
	  _init: function(args) {
	    this._fn = args[0];
	    if (args.length > 1) {
	      this._send(VALUE, args[1], true);
	    }
	  },
	  _free: function() {
	    this._fn = null;
	  },
	  _handleValue: function(x, isCurrent) {
	    if (this._current !== NOTHING) {
	      x = this._fn(this._current, x);
	    }
	    this._send(VALUE, x, isCurrent);
	  }
	}, {streamMethod: produceProperty});





	// .reduce(fn, seed)

	withOneSource('reduce', {
	  _init: function(args) {
	    this._fn = args[0];
	    this._result = args.length > 1 ? args[1] : NOTHING;
	  },
	  _free: function() {
	    this._fn = null;
	    this._result = null;
	  },
	  _handleValue: function(x) {
	    this._result = (this._result === NOTHING) ? x : this._fn(this._result, x);
	  },
	  _handleEnd: function(__, isCurrent) {
	    if (this._result !== NOTHING) {
	      this._send(VALUE, this._result, isCurrent);
	    }
	    this._send(END, null, isCurrent);
	  }
	});




	// .mapEnd(fn)

	withOneSource('mapEnd', {
	  _init: function(args) {
	    this._fn = args[0];
	  },
	  _free: function() {
	    this._fn = null;
	  },
	  _handleEnd: function(__, isCurrent) {
	    this._send(VALUE, this._fn(), isCurrent);
	    this._send(END, null, isCurrent);
	  }
	});




	// .skipEnd()

	withOneSource('skipEnd', {
	  _handleEnd: function(__, isCurrent) {}
	});




	// .slidingWindow(max[, min])

	withOneSource('slidingWindow', {
	  _init: function(args) {
	    this._max = args[0];
	    this._min = args[1] || 0;
	    this._buff = [];
	  },
	  _free: function() {
	    this._buff = null;
	  },
	  _handleValue: function(x, isCurrent) {
	    this._buff = slide(this._buff, x, this._max);
	    if (this._buff.length >= this._min) {
	      this._send(VALUE, this._buff, isCurrent);
	    }
	  }
	});




	// .bufferWhile([predicate], [options])

	withOneSource('bufferWhile', {
	  _init: function(args) {
	    this._fn = args[0] || id;
	    this._flushOnEnd = get(args[1], 'flushOnEnd', true);
	    this._buff = [];
	  },
	  _free: function() {
	    this._buff = null;
	  },
	  _flush: function(isCurrent) {
	    if (this._buff !== null && this._buff.length !== 0) {
	      this._send(VALUE, this._buff, isCurrent);
	      this._buff = [];
	    }
	  },
	  _handleValue: function(x, isCurrent) {
	    this._buff.push(x);
	    if (!this._fn(x)) {
	      this._flush(isCurrent);
	    }
	  },
	  _handleEnd: function(x, isCurrent) {
	    if (this._flushOnEnd) {
	      this._flush(isCurrent);
	    }
	    this._send(END, null, isCurrent);
	  }
	});





	// .debounce(wait, {immediate})

	withOneSource('debounce', {
	  _init: function(args) {
	    this._wait = Math.max(0, args[0]);
	    this._immediate = get(args[1], 'immediate', false);
	    this._lastAttempt = 0;
	    this._timeoutId = null;
	    this._laterValue = null;
	    this._endLater = false;
	    var $ = this;
	    this._$later = function() {  $._later()  };
	  },
	  _free: function() {
	    this._laterValue = null;
	    this._$later = null;
	  },
	  _handleValue: function(x, isCurrent) {
	    if (isCurrent) {
	      this._send(VALUE, x, isCurrent);
	    } else {
	      this._lastAttempt = now();
	      if (this._immediate && !this._timeoutId) {
	        this._send(VALUE, x);
	      }
	      if (!this._timeoutId) {
	        this._timeoutId = setTimeout(this._$later, this._wait);
	      }
	      if (!this._immediate) {
	        this._laterValue = x;
	      }
	    }
	  },
	  _handleEnd: function(__, isCurrent) {
	    if (isCurrent) {
	      this._send(END, null, isCurrent);
	    } else {
	      if (this._timeoutId && !this._immediate) {
	        this._endLater = true;
	      } else {
	        this._send(END);
	      }
	    }
	  },
	  _later: function() {
	    var last = now() - this._lastAttempt;
	    if (last < this._wait && last >= 0) {
	      this._timeoutId = setTimeout(this._$later, this._wait - last);
	    } else {
	      this._timeoutId = null;
	      if (!this._immediate) {
	        this._send(VALUE, this._laterValue);
	        this._laterValue = null;
	      }
	      if (this._endLater) {
	        this._send(END);
	      }
	    }
	  }
	});





	// .throttle(wait, {leading, trailing})

	withOneSource('throttle', {
	  _init: function(args) {
	    this._wait = Math.max(0, args[0]);
	    this._leading = get(args[1], 'leading', true);
	    this._trailing = get(args[1], 'trailing', true);
	    this._trailingValue = null;
	    this._timeoutId = null;
	    this._endLater = false;
	    this._lastCallTime = 0;
	    var $ = this;
	    this._$trailingCall = function() {  $._trailingCall()  };
	  },
	  _free: function() {
	    this._trailingValue = null;
	    this._$trailingCall = null;
	  },
	  _handleValue: function(x, isCurrent) {
	    if (isCurrent) {
	      this._send(VALUE, x, isCurrent);
	    } else {
	      var curTime = now();
	      if (this._lastCallTime === 0 && !this._leading) {
	        this._lastCallTime = curTime;
	      }
	      var remaining = this._wait - (curTime - this._lastCallTime);
	      if (remaining <= 0) {
	        this._cancelTraling();
	        this._lastCallTime = curTime;
	        this._send(VALUE, x);
	      } else if (this._trailing) {
	        this._cancelTraling();
	        this._trailingValue = x;
	        this._timeoutId = setTimeout(this._$trailingCall, remaining);
	      }
	    }
	  },
	  _handleEnd: function(__, isCurrent) {
	    if (isCurrent) {
	      this._send(END, null, isCurrent);
	    } else {
	      if (this._timeoutId) {
	        this._endLater = true;
	      } else {
	        this._send(END);
	      }
	    }
	  },
	  _cancelTraling: function() {
	    if (this._timeoutId !== null) {
	      clearTimeout(this._timeoutId);
	      this._timeoutId = null;
	    }
	  },
	  _trailingCall: function() {
	    this._send(VALUE, this._trailingValue);
	    this._timeoutId = null;
	    this._trailingValue = null;
	    this._lastCallTime = !this._leading ? 0 : now();
	    if (this._endLater) {
	      this._send(END);
	    }
	  }
	});





	// .delay()

	withOneSource('delay', {
	  _init: function(args) {
	    this._wait = Math.max(0, args[0]);
	    this._buff = [];
	    var $ = this;
	    this._$shiftBuff = function() {  $._send(VALUE, $._buff.shift())  }
	  },
	  _free: function() {
	    this._buff = null;
	    this._$shiftBuff = null;
	  },
	  _handleValue: function(x, isCurrent) {
	    if (isCurrent) {
	      this._send(VALUE, x, isCurrent);
	    } else {
	      this._buff.push(x);
	      setTimeout(this._$shiftBuff, this._wait);
	    }
	  },
	  _handleEnd: function(__, isCurrent) {
	    if (isCurrent) {
	      this._send(END, null, isCurrent);
	    } else {
	      var $ = this;
	      setTimeout(function() {  $._send(END)  }, this._wait);
	    }
	  }
	});

	// Kefir.fromBinder(fn)

	function FromBinder(fn) {
	  Stream.call(this);
	  this._fn = fn;
	  this._unsubscribe = null;
	}

	inherit(FromBinder, Stream, {

	  _name: 'fromBinder',

	  _onActivation: function() {
	    var $ = this
	      , isCurrent = true
	      , emitter = {
	        emit: function(x) {  $._send(VALUE, x, isCurrent)  },
	        end: function() {  $._send(END, null, isCurrent)  }
	      };
	    this._unsubscribe = this._fn(emitter) || null;
	    isCurrent = false;
	  },
	  _onDeactivation: function() {
	    if (this._unsubscribe !== null) {
	      this._unsubscribe();
	      this._unsubscribe = null;
	    }
	  },

	  _clear: function() {
	    Stream.prototype._clear.call(this);
	    this._fn = null;
	  }

	})

	Kefir.fromBinder = function(fn) {
	  return new FromBinder(fn);
	}






	// Kefir.emitter()

	function Emitter() {
	  Stream.call(this);
	}

	inherit(Emitter, Stream, {
	  _name: 'emitter',
	  emit: function(x) {
	    this._send(VALUE, x);
	    return this;
	  },
	  end: function() {
	    this._send(END);
	    return this;
	  }
	});

	Kefir.emitter = function() {
	  return new Emitter();
	}

	Kefir.Emitter = Emitter;







	// Kefir.never()

	var neverObj = new Stream();
	neverObj._send(END);
	neverObj._name = 'never';
	Kefir.never = function() {  return neverObj  }





	// Kefir.constant(x)

	function Constant(x) {
	  Property.call(this);
	  this._send(VALUE, x);
	  this._send(END);
	}

	inherit(Constant, Property, {
	  _name: 'constant'
	})

	Kefir.constant = function(x) {
	  return new Constant(x);
	}


	// .setName

	Observable.prototype.setName = function(sourceObs, selfName /* or just selfName */) {
	  this._name = selfName ? sourceObs._name + '.' + selfName : sourceObs;
	  return this;
	}



	// .mapTo

	Observable.prototype.mapTo = function(value) {
	  return this.map(function() {  return value  }).setName(this, 'mapTo');
	}



	// .pluck

	Observable.prototype.pluck = function(propertyName) {
	  return this.map(function(x) {
	    return x[propertyName];
	  }).setName(this, 'pluck');
	}



	// .invoke

	Observable.prototype.invoke = function(methodName /*, arg1, arg2... */) {
	  var args = rest(arguments, 1);
	  return this.map(args ?
	    function(x) {  return apply(x[methodName], x, args)  } :
	    function(x) {  return x[methodName]()  }
	  ).setName(this, 'invoke');
	}




	// .timestamp

	Observable.prototype.timestamp = function() {
	  return this.map(function(x) {  return {value: x, time: now()}  }).setName(this, 'timestamp');
	}




	// .tap

	Observable.prototype.tap = function(fn) {
	  return this.map(function(x) {
	    fn(x);
	    return x;
	  }).setName(this, 'tap');
	}



	// .and

	Kefir.and = function(observables) {
	  return Kefir.combine(observables, and).setName('and');
	}

	Observable.prototype.and = function(other) {
	  return this.combine(other, and).setName('and');
	}



	// .or

	Kefir.or = function(observables) {
	  return Kefir.combine(observables, or).setName('or');
	}

	Observable.prototype.or = function(other) {
	  return this.combine(other, or).setName('or');
	}



	// .not

	Observable.prototype.not = function() {
	  return this.map(not).setName(this, 'not');
	}



	// .awaiting

	Observable.prototype.awaiting = function(other) {
	  return Kefir.merge([
	    this.mapTo(true),
	    other.mapTo(false)
	  ]).skipDuplicates().toProperty(false).setName(this, 'awaiting');
	}




	// .fromCallback

	Kefir.fromCallback = function(callbackConsumer) {
	  var called = false;
	  return Kefir.fromBinder(function(emitter) {
	    if (!called) {
	      callbackConsumer(function(x) {
	        emitter.emit(x);
	        emitter.end();
	      });
	      called = true;
	    }
	  }).setName('fromCallback');
	}





	// ._fromEvent

	Kefir._fromEvent = function(sub, unsub, transformer) {
	  return Kefir.fromBinder(function(emitter) {
	    var handler = transformer ? function() {
	      emitter.emit(apply(transformer, this, arguments));
	    } : emitter.emit;
	    sub(handler);
	    return function() {  unsub(handler)  };
	  });
	}




	// .fromEvent

	var subUnsubPairs = [
	  ['addEventListener', 'removeEventListener'],
	  ['addListener', 'removeListener'],
	  ['on', 'off']
	];

	Kefir.fromEvent = function(target, eventName, transformer) {
	  var pair, sub, unsub;

	  for (var i = 0; i < subUnsubPairs.length; i++) {
	    pair = subUnsubPairs[i];
	    if (isFn(target[pair[0]]) && isFn(target[pair[1]])) {
	      sub = pair[0];
	      unsub = pair[1];
	      break;
	    }
	  }

	  if (sub === undefined) {
	    throw new Error('target don\'t support any of addEventListener/removeEventListener, addListener/removeListener, on/off method pair');
	  }

	  return Kefir._fromEvent(
	    function(handler) {  target[sub](eventName, handler)  },
	    function(handler) {  target[unsub](eventName, handler)  },
	    transformer
	  ).setName('fromEvent');
	}

	var withTwoSourcesAndBufferMixin = {
	  _init: function(args) {
	    this._buff = [];
	    this._flushOnEnd = get(args[0], 'flushOnEnd', true);
	  },
	  _free: function() {
	    this._buff = null;
	  },
	  _flush: function(isCurrent) {
	    if (this._buff !== null && this._buff.length !== 0) {
	      this._send(VALUE, this._buff, isCurrent);
	      this._buff = [];
	    }
	  },

	  _handlePrimaryEnd: function(__, isCurrent) {
	    if (this._flushOnEnd) {
	      this._flush(isCurrent);
	    }
	    this._send(END, null, isCurrent);
	  }
	};



	withTwoSources('bufferBy', extend({

	  _onActivation: function() {
	    this._primary.onAny(this._$handlePrimaryAny);
	    if (this._alive && this._secondary !== null) {
	      this._secondary.onAny(this._$handleSecondaryAny);
	    }
	  },

	  _handlePrimaryValue: function(x, isCurrent) {
	    this._buff.push(x);
	  },

	  _handleSecondaryValue: function(x, isCurrent) {
	    this._flush(isCurrent);
	  },

	  _handleSecondaryEnd: function(x, isCurrent) {
	    if (!this._flushOnEnd) {
	      this._send(END, null, isCurrent);
	    }
	  }

	}, withTwoSourcesAndBufferMixin));




	withTwoSources('bufferWhileBy', extend({

	  _handlePrimaryValue: function(x, isCurrent) {
	    this._buff.push(x);
	    if (this._lastSecondary !== NOTHING && !this._lastSecondary) {
	      this._flush(isCurrent);
	    }
	  },

	  _handleSecondaryEnd: function(x, isCurrent) {
	    if (!this._flushOnEnd && (this._lastSecondary === NOTHING || this._lastSecondary)) {
	      this._send(END, null, isCurrent);
	    }
	  }

	}, withTwoSourcesAndBufferMixin));





	withTwoSources('filterBy', {

	  _handlePrimaryValue: function(x, isCurrent) {
	    if (this._lastSecondary !== NOTHING && this._lastSecondary) {
	      this._send(VALUE, x, isCurrent);
	    }
	  },

	  _handleSecondaryEnd: function(__, isCurrent) {
	    if (this._lastSecondary === NOTHING || !this._lastSecondary) {
	      this._send(END, null, isCurrent);
	    }
	  }

	});



	withTwoSources('skipUntilBy', {

	  _handlePrimaryValue: function(x, isCurrent) {
	    if (this._lastSecondary !== NOTHING) {
	      this._send(VALUE, x, isCurrent);
	    }
	  },

	  _handleSecondaryValue: function(x) {
	    this._lastSecondary = x;
	    this._removeSecondary();
	  },

	  _handleSecondaryEnd: function(__, isCurrent) {
	    if (this._lastSecondary === NOTHING) {
	      this._send(END, null, isCurrent);
	    }
	  }

	});



	withTwoSources('takeUntilBy', {

	  _handleSecondaryValue: function(x, isCurrent) {
	    this._send(END, null, isCurrent);
	  }

	});



	withTwoSources('takeWhileBy', {

	  _handlePrimaryValue: function(x, isCurrent) {
	    if (this._lastSecondary !== NOTHING) {
	      this._send(VALUE, x, isCurrent);
	    }
	  },

	  _handleSecondaryValue: function(x, isCurrent) {
	    this._lastSecondary = x;
	    if (!this._lastSecondary) {
	      this._send(END, null, isCurrent);
	    }
	  },

	  _handleSecondaryEnd: function(__, isCurrent) {
	    if (this._lastSecondary === NOTHING) {
	      this._send(END, null, isCurrent);
	    }
	  }

	});




	withTwoSources('skipWhileBy', {

	  _handlePrimaryValue: function(x, isCurrent) {
	    if (this._lastSecondary !== NOTHING && !this._lastSecondary) {
	      this._send(VALUE, x, isCurrent);
	    }
	  },

	  _handleSecondaryValue: function(x, isCurrent) {
	    this._lastSecondary = x;
	    if (!this._lastSecondary) {
	      this._removeSecondary();
	    }
	  },

	  _handleSecondaryEnd: function(__, isCurrent) {
	    if (this._lastSecondary === NOTHING || this._lastSecondary) {
	      this._send(END, null, isCurrent);
	    }
	  }

	});


	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return Kefir;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    global.Kefir = Kefir;
	  } else if (typeof module === "object" && typeof exports === "object") {
	    module.exports = Kefir;
	    Kefir.Kefir = Kefir;
	  } else {
	    global.Kefir = Kefir;
	  }

	}(this));

/***/ }
/******/ ]);
module.exports = {
    kefir: kefir
};

},{"Prelude":35}],32:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Data_Function = require("Data.Function");
var FRP_Kefir_Foreign = require("FRP.Kefir.Foreign");
var Prelude = require("Prelude");
var Control_Monad_Eff = require("Control.Monad.Eff");
function Value(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
Value.create = function (value0) {
    return function (value1) {
        return new Value(value0, value1);
    };
};
function End() {

};
End.value = new End();
function StreamLike() {

};

  function call0Eff(f, obj) {
    return function(){
      return obj[f]();
    }
  };

  function call1Eff(f, obj, a) {
    return function(){
      return obj[f](a);
    }
  };

  function call2Eff(f, obj, a, b) {
    return function(){
      return obj[f](a, b);
    }
  };

  function call3Eff(f, obj, a, b, c) {
    return function(){
      return obj[f](a, b, c);
    }
  };

  function call0EffAsync(f, obj) {
    return function(){
      return setTimeout(function(){obj[f]()}, 0);
    }
  };

  function call1EffAsync(f, obj, a) {
    return function(){
      return setTimeout(function(){obj[f](a)}, 0);
    }
  };

  function execute(m){
    return m();
  };

function wrap(m){
  return function wrapEff(){
    return m();
  }
};

function forgetImpl(stream){
  return stream;
};

function onValueImpl(str, fn){
  return function onValueImplEff(){
    function onValueCallback(x){
      fn(x)();
    };
    str.onValue(onValueCallback);
    return function offValueEff() {
      str.offValue(onValueCallback);
    }
  }
};

function onEndImpl(str, fn){
  return function onEndImplEff(){
    function onEndCallback(){
      fn();
    }
    str.onEnd(onEndCallback);
    return function offEndEff() {
      str.offEnd(onEndCallback);
    }
  }
};

function onAnyImpl(cnsts, str, fn){
  return function onAnyImplEff(){
    function onAnyCallback(ev){
      var v = ev.type === 'value'
        ? cnsts.value(ev.current, ev.value)
        : cnsts.end;
      return fn(v)();
    }
    str.onAny(onAnyCallback);
    return function offAnyEff(){
      str.offAny(onAnyCallback);
    }
  }
};

function withHandlerImpl(cnsts, src, fun){
  return function withHandlerImplEff(){
    return src.withHandler(function(emitter, ev){
      var v = ev.type === 'value'
        ? cnsts.value(ev.current, ev.value)
        : cnsts.end;
      fun(emitter, v)();
    });
  }
};
var undefined = undefined;;
var withInterval = function (i) {
    return function (f) {
        return call2Eff("withInterval", FRP_Kefir_Foreign.kefir, i, function (e) {
            return execute(f(e));
        });
    };
};
var withHandler = function (__dict_StreamLike_0) {
    return function (s) {
        return function (f) {
            return withHandlerImpl({
                value: Data_Function.mkFn2(Value.create), 
                end: End.value
            }, s, Data_Function.mkFn2(f));
        };
    };
};
var withDefault = function (__dict_StreamLike_1) {
    return function (d) {
        return function (s) {
            return call1Eff("withDefault", s, d);
        };
    };
};
var unsafeGlobalize = function (__dict_StreamLike_2) {
    return execute;
};
var unsafeForget = function (__dict_StreamLike_3) {
    return forgetImpl;
};
var zipWith = function (__dict_StreamLike_4) {
    return function (__dict_StreamLike_5) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return call2Eff("zip", FRP_Kefir_Foreign.kefir, [ unsafeForget(__dict_StreamLike_4)(a), unsafeForget(__dict_StreamLike_5)(b) ], Data_Function.mkFn2(f));
                };
            };
        };
    };
};
var unPlug = function (__dict_StreamLike_6) {
    return Data_Function.runFn3(call1Eff)("unplug");
};
var toPropertyWith = function (w) {
    return function (s) {
        return call1Eff("toProperty", s, w);
    };
};
var toProperty = Data_Function.runFn2(call0Eff)("toProperty");
var throttleWith = function (opts) {
    return function (w) {
        return function (s) {
            return call2Eff("throttle", s, w, opts);
        };
    };
};
var throttle = function (w) {
    return function (s) {
        return call1Eff("throttle", s, w);
    };
};
var takeWhileEff = function (__dict_StreamLike_7) {
    return function (f) {
        return function (s) {
            return call1Eff("takeWhile", s, function (v) {
                return execute(f(v));
            });
        };
    };
};
var takeWhileBy = function (__dict_StreamLike_8) {
    return function (__dict_StreamLike_9) {
        return function (v) {
            return function (f) {
                return call1Eff("takeWhileBy", v, f);
            };
        };
    };
};
var takeWhile = function (__dict_StreamLike_10) {
    return function (f) {
        return function (s) {
            return call1Eff("takeWhile", s, f);
        };
    };
};
var takeUntilBy = function (__dict_StreamLike_11) {
    return function (__dict_StreamLike_12) {
        return function (v) {
            return function (f) {
                return call1Eff("takeUntilBy", v, f);
            };
        };
    };
};
var take = function (__dict_StreamLike_13) {
    return function (n) {
        return function (s) {
            return call1Eff("take", s, n);
        };
    };
};
var streamLikeStream = new StreamLike();
var streamLikeProperty = new StreamLike();
var slidingWindow = function (min) {
    return function (max) {
        return function (s) {
            return call2Eff("slidingWindow", s, max, min);
        };
    };
};
var skipWhileEff = function (__dict_StreamLike_14) {
    return function (f) {
        return function (s) {
            return call1Eff("skipWhile", s, function (v) {
                return execute(f(v));
            });
        };
    };
};
var skipWhileBy = function (__dict_StreamLike_15) {
    return function (__dict_StreamLike_16) {
        return function (v) {
            return function (f) {
                return call1Eff("skipWhileBy", v, f);
            };
        };
    };
};
var skipWhile = function (__dict_StreamLike_17) {
    return function (f) {
        return function (s) {
            return call1Eff("skipWhile", s, f);
        };
    };
};
var skipUntilBy = function (__dict_StreamLike_18) {
    return function (__dict_StreamLike_19) {
        return function (v) {
            return function (f) {
                return call1Eff("skipUntilBy", v, f);
            };
        };
    };
};
var skipEnd = Data_Function.runFn2(call0Eff)("skipEnd");
var skipDuplicatesWith = function (__dict_StreamLike_20) {
    return function (f) {
        return function (s) {
            return call1Eff("skipDuplicates", s, Data_Function.mkFn2(f));
        };
    };
};
var skipDuplicates = function (__dict_StreamLike_21) {
    return function (__dict_Eq_22) {
        return skipDuplicatesWith(__dict_StreamLike_21)(Prelude["=="](__dict_Eq_22));
    };
};
var skip = function (__dict_StreamLike_23) {
    return function (n) {
        return function (s) {
            return call1Eff("skip", s, n);
        };
    };
};
var sequentially = Data_Function.runFn4(call2Eff)("sequentially")(FRP_Kefir_Foreign.kefir);
var scan1 = function (__dict_StreamLike_24) {
    return function (f) {
        return function (s) {
            return call1Eff("scan", s, Data_Function.mkFn2(f));
        };
    };
};
var scan = function (__dict_StreamLike_25) {
    return function (f) {
        return function (a) {
            return function (s) {
                return call2Eff("scan", s, Data_Function.mkFn2(f), a);
            };
        };
    };
};
var sampledBy = function (__dict_StreamLike_26) {
    return function (__dict_StreamLike_27) {
        return function (pass) {
            return function (act) {
                return function (f) {
                    return call3Eff("sampledBy", FRP_Kefir_Foreign.kefir, [ pass ], [ act ], Data_Function.mkFn2(f));
                };
            };
        };
    };
};
var repeatedly = Data_Function.runFn4(call2Eff)("repeatedly")(FRP_Kefir_Foreign.kefir);
var reduceEff1 = function (__dict_StreamLike_28) {
    return function (f) {
        return function (s) {
            return call1Eff("reduce", s, function (a, b) {
                return execute(f(a)(b));
            });
        };
    };
};
var reduceEff = function (__dict_StreamLike_29) {
    return function (f) {
        return function (a) {
            return function (s) {
                return call2Eff("reduce", s, function (a_1, b) {
                    return execute(f(a_1)(b));
                }, a);
            };
        };
    };
};
var reduce1 = function (__dict_StreamLike_30) {
    return function (f) {
        return function (s) {
            return call1Eff("reduce", s, Data_Function.mkFn2(f));
        };
    };
};
var reduce = function (__dict_StreamLike_31) {
    return function (f) {
        return function (a) {
            return function (s) {
                return call2Eff("reduce", s, Data_Function.mkFn2(f), a);
            };
        };
    };
};
var pool = call0Eff("pool", FRP_Kefir_Foreign.kefir);
var plug = function (__dict_StreamLike_32) {
    return Data_Function.runFn3(call1Eff)("plug");
};
var or = function (__dict_StreamLike_33) {
    return Data_Function.runFn3(call1Eff)("or")(FRP_Kefir_Foreign.kefir);
};
var onValue = function (__dict_StreamLike_34) {
    return Data_Function.runFn2(onValueImpl);
};
var onLog = function (__dict_StreamLike_35) {
    return Data_Function.runFn3(call1Eff)("log");
};
var onEnd = function (__dict_StreamLike_36) {
    return Data_Function.runFn2(onEndImpl);
};
var onAny = function (__dict_StreamLike_37) {
    return Data_Function.runFn3(onAnyImpl)({
        value: Data_Function.mkFn2(Value.create), 
        end: End.value
    });
};
var offLog = function (__dict_StreamLike_38) {
    return Data_Function.runFn2(call0Eff)("offLog");
};
var never = call0Eff("never", FRP_Kefir_Foreign.kefir);
var merge = function (__dict_StreamLike_39) {
    return Data_Function.runFn3(call1Eff)("merge")(FRP_Kefir_Foreign.kefir);
};
var mapEnd = function (f) {
    return function (s) {
        return call1Eff("mapEnd", s, wrap(f));
    };
};
var mapEff = function (__dict_StreamLike_40) {
    return function (f) {
        return function (s) {
            return call1Eff("map", s, function (v) {
                return execute(f(v));
            });
        };
    };
};
var map = function (__dict_StreamLike_41) {
    return function (f) {
        return function (s) {
            return call1Eff("map", s, f);
        };
    };
};
var later = Data_Function.runFn4(call2Eff)("later")(FRP_Kefir_Foreign.kefir);
var interval = Data_Function.runFn4(call2Eff)("interval")(FRP_Kefir_Foreign.kefir);
var fromPoll = Data_Function.runFn4(call2Eff)("fromPoll")(FRP_Kefir_Foreign.kefir);
var fromCallback = function (m) {
    return call1Eff("fromCallback", FRP_Kefir_Foreign.kefir, function (e) {
        return execute(m(function (a) {
            return Prelude["return"](Control_Monad_Eff.monadEff)(e(a));
        }));
    });
};
var fromBinder = function (f) {
    return call1Eff("fromBinder", FRP_Kefir_Foreign.kefir, function (e) {
        return execute(f(e));
    });
};
var forget = function (__dict_StreamLike_42) {
    return forgetImpl;
};
var flattenWith = function (f) {
    return function (s) {
        return call1Eff("flatten", s, f);
    };
};
var flatten = Data_Function.runFn2(call0Eff)("flatten");
var flatMapWith = function (__dict_StreamLike_43) {
    return function (__dict_StreamLike_44) {
        return function (s) {
            return function (f) {
                return call1Eff("flatMap", s, function (a) {
                    return execute(f(a));
                });
            };
        };
    };
};
var flatMapLatestWith = function (__dict_StreamLike_45) {
    return function (__dict_StreamLike_46) {
        return function (s) {
            return function (f) {
                return call1Eff("flatMapLatest", s, function (a) {
                    return execute(f(a));
                });
            };
        };
    };
};
var flatMapLatest = function (__dict_StreamLike_47) {
    return function (__dict_StreamLike_48) {
        return Data_Function.runFn2(call0Eff)("flatMapLatest");
    };
};
var flatMapFirstWith = function (__dict_StreamLike_49) {
    return function (__dict_StreamLike_50) {
        return function (s) {
            return function (f) {
                return call1Eff("flatMapFirst", s, function (a) {
                    return execute(f(a));
                });
            };
        };
    };
};
var flatMapFirst = function (__dict_StreamLike_51) {
    return function (__dict_StreamLike_52) {
        return Data_Function.runFn2(call0Eff)("flatMapFirst");
    };
};
var flatMapConcurLimitWith = function (__dict_StreamLike_53) {
    return function (__dict_StreamLike_54) {
        return function (l) {
            return function (s) {
                return function (f) {
                    return call2Eff("flatMapConcurLimit", s, function (a) {
                        return execute(f(a));
                    }, l);
                };
            };
        };
    };
};
var flatMapConcurLimit = function (__dict_StreamLike_55) {
    return function (__dict_StreamLike_56) {
        return function (l) {
            return function (s) {
                return call2Eff("flatMapConcurLimit", s, undefined, l);
            };
        };
    };
};
var flatMapConcatWith = function (__dict_StreamLike_57) {
    return function (__dict_StreamLike_58) {
        return function (s) {
            return function (f) {
                return call1Eff("flatMapConcat", s, function (a) {
                    return execute(f(a));
                });
            };
        };
    };
};
var flatMapConcat = function (__dict_StreamLike_59) {
    return function (__dict_StreamLike_60) {
        return Data_Function.runFn2(call0Eff)("flatMapConcat");
    };
};
var flatMap = function (__dict_StreamLike_61) {
    return function (__dict_StreamLike_62) {
        return Data_Function.runFn2(call0Eff)("flatMap");
    };
};
var filterEff = function (__dict_StreamLike_63) {
    return function (f) {
        return function (s) {
            return call1Eff("filter", s, function (v) {
                return execute(f(v));
            });
        };
    };
};
var filterBy = function (__dict_StreamLike_64) {
    return function (__dict_StreamLike_65) {
        return function (v) {
            return function (f) {
                return call1Eff("filterBy", v, f);
            };
        };
    };
};
var filter = function (__dict_StreamLike_66) {
    return function (f) {
        return function (s) {
            return call1Eff("filter", s, f);
        };
    };
};
var endAsync = Data_Function.runFn2(call0EffAsync)("end");
var end = Data_Function.runFn2(call0Eff)("end");
var emitter = call0Eff("emitter", FRP_Kefir_Foreign.kefir);
var emitAsync = Data_Function.runFn3(call1EffAsync)("emit");
var emit = Data_Function.runFn3(call1Eff)("emit");
var diff1 = function (__dict_StreamLike_67) {
    return function (f) {
        return function (s) {
            return call1Eff("diff", s, Data_Function.mkFn2(f));
        };
    };
};
var diff = function (__dict_StreamLike_68) {
    return function (f) {
        return function (a) {
            return function (s) {
                return call2Eff("diff", s, Data_Function.mkFn2(f), a);
            };
        };
    };
};
var delay = function (w) {
    return function (s) {
        return call1Eff("delay", s, w);
    };
};
var debounceWith = function (opts) {
    return function (w) {
        return function (s) {
            return call2Eff("debounce", s, w, opts);
        };
    };
};
var debounce = function (w) {
    return function (s) {
        return call1Eff("debounce", s, w);
    };
};
var constant = Data_Function.runFn3(call1Eff)("constant")(FRP_Kefir_Foreign.kefir);
var concat = function (__dict_StreamLike_69) {
    return Data_Function.runFn3(call1Eff)("concat")(FRP_Kefir_Foreign.kefir);
};
var combine = function (__dict_StreamLike_70) {
    return function (__dict_StreamLike_71) {
        return function (a) {
            return function (b) {
                return function (f) {
                    return call2Eff("combine", FRP_Kefir_Foreign.kefir, [ unsafeForget(__dict_StreamLike_70)(a), unsafeForget(__dict_StreamLike_71)(b) ], Data_Function.mkFn2(f));
                };
            };
        };
    };
};
var changes = Data_Function.runFn2(call0Eff)("changes");
var bus = call0Eff("bus", FRP_Kefir_Foreign.kefir);
var bufferWhileWith = function (opts) {
    return function (f) {
        return function (s) {
            return call2Eff("bufferWhile", s, f, opts);
        };
    };
};
var bufferWhileBy = function (__dict_StreamLike_72) {
    return function (__dict_StreamLike_73) {
        return function (v) {
            return function (f) {
                return call1Eff("bufferWhileBy", v, f);
            };
        };
    };
};
var bufferWhile = function (f) {
    return function (s) {
        return call1Eff("bufferWhile", s, f);
    };
};
var bufferBy = function (__dict_StreamLike_74) {
    return function (__dict_StreamLike_75) {
        return function (v) {
            return function (f) {
                return call1Eff("bufferBy", v, f);
            };
        };
    };
};
var awaiting = function (__dict_StreamLike_76) {
    return function (__dict_StreamLike_77) {
        return function (v) {
            return function (f) {
                return call1Eff("awaiting", v, f);
            };
        };
    };
};
var asStream = function (__dict_StreamLike_78) {
    return forgetImpl;
};
var and = function (__dict_StreamLike_79) {
    return Data_Function.runFn3(call1Eff)("and")(FRP_Kefir_Foreign.kefir);
};
module.exports = {
    End: End, 
    StreamLike: StreamLike, 
    Value: Value, 
    and: and, 
    awaiting: awaiting, 
    bufferBy: bufferBy, 
    bufferWhile: bufferWhile, 
    bufferWhileBy: bufferWhileBy, 
    bufferWhileWith: bufferWhileWith, 
    bus: bus, 
    changes: changes, 
    combine: combine, 
    concat: concat, 
    constant: constant, 
    debounce: debounce, 
    debounceWith: debounceWith, 
    delay: delay, 
    diff: diff, 
    diff1: diff1, 
    emit: emit, 
    emitAsync: emitAsync, 
    emitter: emitter, 
    end: end, 
    endAsync: endAsync, 
    filter: filter, 
    filterBy: filterBy, 
    filterEff: filterEff, 
    flatMap: flatMap, 
    flatMapConcat: flatMapConcat, 
    flatMapConcatWith: flatMapConcatWith, 
    flatMapConcurLimit: flatMapConcurLimit, 
    flatMapConcurLimitWith: flatMapConcurLimitWith, 
    flatMapFirst: flatMapFirst, 
    flatMapFirstWith: flatMapFirstWith, 
    flatMapLatest: flatMapLatest, 
    flatMapLatestWith: flatMapLatestWith, 
    flatMapWith: flatMapWith, 
    flatten: flatten, 
    flattenWith: flattenWith, 
    forget: forget, 
    fromBinder: fromBinder, 
    fromCallback: fromCallback, 
    fromPoll: fromPoll, 
    interval: interval, 
    later: later, 
    map: map, 
    mapEff: mapEff, 
    mapEnd: mapEnd, 
    merge: merge, 
    never: never, 
    offLog: offLog, 
    onAny: onAny, 
    onEnd: onEnd, 
    onLog: onLog, 
    onValue: onValue, 
    or: or, 
    plug: plug, 
    pool: pool, 
    reduce: reduce, 
    reduce1: reduce1, 
    reduceEff: reduceEff, 
    reduceEff1: reduceEff1, 
    repeatedly: repeatedly, 
    sampledBy: sampledBy, 
    scan: scan, 
    scan1: scan1, 
    sequentially: sequentially, 
    skip: skip, 
    skipDuplicates: skipDuplicates, 
    skipDuplicatesWith: skipDuplicatesWith, 
    skipEnd: skipEnd, 
    skipUntilBy: skipUntilBy, 
    skipWhile: skipWhile, 
    skipWhileBy: skipWhileBy, 
    skipWhileEff: skipWhileEff, 
    slidingWindow: slidingWindow, 
    streamLikeProperty: streamLikeProperty, 
    streamLikeStream: streamLikeStream, 
    take: take, 
    takeUntilBy: takeUntilBy, 
    takeWhile: takeWhile, 
    takeWhileBy: takeWhileBy, 
    takeWhileEff: takeWhileEff, 
    throttle: throttle, 
    throttleWith: throttleWith, 
    toProperty: toProperty, 
    toPropertyWith: toPropertyWith, 
    unPlug: unPlug, 
    unsafeGlobalize: unsafeGlobalize, 
    withDefault: withDefault, 
    withHandler: withHandler, 
    withInterval: withInterval, 
    zipWith: zipWith
};

},{"Control.Monad.Eff":7,"Data.Function":15,"FRP.Kefir.Foreign":31,"Prelude":35}],33:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Data_String = require("Data.String");
var Data_Array = require("Data.Array");
var Data_Html_Elements_Html5 = require("Data.Html.Elements.Html5");
var Data_Html_Attributes_Html5 = require("Data.Html.Attributes.Html5");
var Data_Html_Events = require("Data.Html.Events");
var Control_Monad = require("Control.Monad");
var FRP_Kefir = require("FRP.Kefir");
var Data_Foldable = require("Data.Foldable");
var Data_Html = require("Data.Html");
var Control_Monad_Eff = require("Control.Monad.Eff");
function All() {

};
All.value = new All();
function Completed() {

};
Completed.value = new Completed();
function Active() {

};
Active.value = new Active();
var TaskId = {
    create: function (value) {
        return value;
    }
};
function UpdateField(value0) {
    this.value0 = value0;
};
UpdateField.create = function (value0) {
    return new UpdateField(value0);
};
function EditingTask(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
EditingTask.create = function (value0) {
    return function (value1) {
        return new EditingTask(value0, value1);
    };
};
function UpdateTask(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
UpdateTask.create = function (value0) {
    return function (value1) {
        return new UpdateTask(value0, value1);
    };
};
function Add() {

};
Add.value = new Add();
function Delete(value0) {
    this.value0 = value0;
};
Delete.create = function (value0) {
    return new Delete(value0);
};
function DeleteComplete() {

};
DeleteComplete.value = new DeleteComplete();
function Check(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
Check.create = function (value0) {
    return function (value1) {
        return new Check(value0, value1);
    };
};
function CheckAll(value0) {
    this.value0 = value0;
};
CheckAll.create = function (value0) {
    return new CheckAll(value0);
};
function ChangeVisibility(value0) {
    this.value0 = value0;
};
ChangeVisibility.create = function (value0) {
    return new ChangeVisibility(value0);
};

function appendBody(node) {
  return function (){
    document.body.appendChild(node);
  }
};
var updates = FRP_Kefir.unsafeGlobalize(FRP_Kefir.streamLikeStream)(FRP_Kefir.emitter);
var unTaskId = function (_2) {
    return _2;
};
var succTaskId = function (_1) {
    return _1 + 1;
};
var showVisibility = new Prelude.Show(function (_7) {
    if (_7 instanceof All) {
        return "All";
    };
    if (_7 instanceof Completed) {
        return "Completed";
    };
    if (_7 instanceof Active) {
        return "Active";
    };
    throw new Error("Failed pattern match");
});
var onEnter = function (f) {
    return Data_Html_Events.onKeyDown(function (k) {
        return Control_Monad.when(Control_Monad_Eff.monadEff)(Data_Html_Events.keyCode(k) === 13)(f);
    });
};
var taskEntry = function (task) {
    return Data_Html_Elements_Html5.header([ Data_Html_Attributes_Html5.id_("header") ])([ Data_Html_Elements_Html5.h1([  ])([ Data_Html_Elements_Html5.text("todos") ]), Data_Html_Elements_Html5.input([ Data_Html_Attributes_Html5.id_("new-todo"), Data_Html_Attributes_Html5.placeholder("What needs to be done?"), Data_Html_Attributes_Html5.autofocus(true), Data_Html_Attributes_Html5.value(task), Data_Html_Attributes_Html5.name("newTodo"), Data_Html_Events.onInput(function (v) {
        return FRP_Kefir.emitAsync(updates)(UpdateField.create(Data_Html_Events.targetValue(Data_Html_Events.eventLikeEvent)(v)));
    }), onEnter(FRP_Kefir.emitAsync(updates)(Add.value)) ])([  ]) ]);
};
var todoItem = function (todo) {
    var className = (todo.completed ? "completed " : "") + (todo.editing ? "editing" : "");
    return Data_Html_Elements_Html5.li([ Data_Html_Attributes_Html5.class_(className) ])([ Data_Html_Elements_Html5.div([ Data_Html_Attributes_Html5.class_("view") ])([ Data_Html_Elements_Html5.input([ Data_Html_Attributes_Html5.class_("toggle"), Data_Html_Attributes_Html5.type_("checkbox"), Data_Html_Attributes_Html5.checked(todo.completed), Data_Html_Events.onClick(function (_) {
        return FRP_Kefir.emitAsync(updates)(new Check(todo.id, !todo.completed));
    }) ])([  ]), Data_Html_Elements_Html5.label([ Data_Html_Events.onDoubleClick(function (_) {
        return FRP_Kefir.emitAsync(updates)(new EditingTask(todo.id, true));
    }) ])([ Data_Html_Elements_Html5.text(todo.description) ]), Data_Html_Elements_Html5.button([ Data_Html_Attributes_Html5.class_("destroy"), Data_Html_Events.onClick(function (_) {
        return FRP_Kefir.emitAsync(updates)(new Delete(todo.id));
    }) ])([  ]) ]), Data_Html_Elements_Html5.input([ Data_Html_Attributes_Html5.class_("edit"), Data_Html_Attributes_Html5.value(todo.description), Data_Html_Attributes_Html5.name("title"), Data_Html_Attributes_Html5.id_("todo-" + Prelude.show(Prelude.showNumber)(unTaskId(todo.id))), Data_Html_Events.onInput(function (v) {
        return FRP_Kefir.emitAsync(updates)(UpdateTask.create(todo.id)(Data_Html_Events.targetValue(Data_Html_Events.eventLikeEvent)(v)));
    }), Data_Html_Events.onBlur(function (_) {
        return FRP_Kefir.emitAsync(updates)(new EditingTask(todo.id, false));
    }), onEnter(FRP_Kefir.emitAsync(updates)(new EditingTask(todo.id, false))) ])([  ]) ]);
};
var taskList = function (visibility) {
    return function (tasks) {
        var isVisible = function (todo) {
            if (visibility instanceof Completed) {
                return todo.completed;
            };
            if (visibility instanceof Active) {
                return !todo.completed;
            };
            if (visibility instanceof All) {
                return true;
            };
            throw new Error("Failed pattern match");
        };
        var cssVisibility = Data_Array["null"](tasks) ? "hidden" : "visible";
        var allCompleted = Data_Foldable.all(Data_Foldable.foldableArray)(function (t) {
            return t.completed;
        })(tasks);
        return Data_Html_Elements_Html5.section([ Data_Html_Attributes_Html5.id_("main"), Data_Html_Attributes_Html5.style({
            visibility: cssVisibility
        }) ])([ Data_Html_Elements_Html5.input([ Data_Html_Attributes_Html5.id_("toggle-all"), Data_Html_Attributes_Html5.type_("checkbox"), Data_Html_Attributes_Html5.name("toggle"), Data_Html_Attributes_Html5.checked(allCompleted), Data_Html_Events.onClick(function (_) {
            return FRP_Kefir.emitAsync(updates)(new CheckAll(!allCompleted));
        }) ])([  ]), Data_Html_Elements_Html5.label([ Data_Html_Attributes_Html5["for"]("toggle-all") ])([ Data_Html_Elements_Html5.text("Mark all as complete") ]), Data_Html_Elements_Html5.ul([ Data_Html_Attributes_Html5.id_("todo-list") ])(Prelude["<$>"](Data_Array.functorArray)(todoItem)(Data_Array.filter(isVisible)(tasks))) ]);
    };
};
var newTask = function (desc) {
    return function (id) {
        return {
            description: desc, 
            completed: false, 
            editing: false, 
            id: id
        };
    };
};
var infoFooter = Data_Html_Elements_Html5.footer([ Data_Html_Attributes_Html5.id_("info") ])([ Data_Html_Elements_Html5.p([  ])([ Data_Html_Elements_Html5.text("Double-click to edit a todo") ]), Data_Html_Elements_Html5.p([  ])([ Data_Html_Elements_Html5.text("Original on "), Data_Html_Elements_Html5.a([ Data_Html_Attributes_Html5.href("https://github.com/evancz/elm-todomvc") ])([ Data_Html_Elements_Html5.text("elm-todomvc") ]) ]) ]);
var eqVisibility = new Prelude.Eq(function (a) {
    return function (b) {
        return !Prelude["=="](eqVisibility)(a)(b);
    };
}, function (_5) {
    return function (_6) {
        if (_5 instanceof All && _6 instanceof All) {
            return true;
        };
        if (_5 instanceof Completed && _6 instanceof Completed) {
            return true;
        };
        if (_5 instanceof Active && _6 instanceof Active) {
            return true;
        };
        return false;
    };
});
var visibilitySwap = function (uri) {
    return function (visibility) {
        return function (actualVisibility) {
            var className = Prelude["=="](eqVisibility)(visibility)(actualVisibility) ? "selected" : "";
            return Data_Html_Elements_Html5.li([ Data_Html_Events.onClick(function (_) {
                return FRP_Kefir.emitAsync(updates)(new ChangeVisibility(visibility));
            }) ])([ Data_Html_Elements_Html5.a([ Data_Html_Attributes_Html5.class_(className), Data_Html_Attributes_Html5.href(uri) ])([ Data_Html_Elements_Html5.text(Prelude.show(showVisibility)(visibility)) ]) ]);
        };
    };
};
var eqTaskId = new Prelude.Eq(function (a) {
    return function (b) {
        return !Prelude["=="](eqTaskId)(a)(b);
    };
}, function (_3) {
    return function (_4) {
        return _3 === _4;
    };
});
var step = function (state_1) {
    return function (update) {
        if (update instanceof Add) {
            var _17 = {};
            for (var _18 in state_1) {
                if (state_1.hasOwnProperty(_18)) {
                    _17[_18] = state_1[_18];
                };
            };
            _17.uid = succTaskId(state_1.uid);
            _17.field = "";
            _17.tasks = Data_String["null"](state_1.field) ? state_1.tasks : Prelude["++"](Data_Array.semigroupArray)(state_1.tasks)([ newTask(state_1.field)(state_1.uid) ]);
            return _17;
        };
        if (update instanceof UpdateField) {
            var _19 = {};
            for (var _20 in state_1) {
                if (state_1.hasOwnProperty(_20)) {
                    _19[_20] = state_1[_20];
                };
            };
            _19.field = update.value0;
            return _19;
        };
        if (update instanceof EditingTask) {
            var stepTask = function (t) {
                return Prelude["=="](eqTaskId)(t.id)(update.value0) ? (function () {
    var _22 = {};
    for (var _23 in t) {
        if (t.hasOwnProperty(_23)) {
            _22[_23] = t[_23];
        };
    };
    _22.editing = update.value1;
    return _22;
})() : t;
            };
            var _24 = {};
            for (var _25 in state_1) {
                if (state_1.hasOwnProperty(_25)) {
                    _24[_25] = state_1[_25];
                };
            };
            _24.tasks = Prelude["<$>"](Data_Array.functorArray)(stepTask)(state_1.tasks);
            return _24;
        };
        if (update instanceof UpdateTask) {
            var stepTask = function (t) {
                return Prelude["=="](eqTaskId)(t.id)(update.value0) ? (function () {
    var _28 = {};
    for (var _29 in t) {
        if (t.hasOwnProperty(_29)) {
            _28[_29] = t[_29];
        };
    };
    _28.description = update.value1;
    return _28;
})() : t;
            };
            var _30 = {};
            for (var _31 in state_1) {
                if (state_1.hasOwnProperty(_31)) {
                    _30[_31] = state_1[_31];
                };
            };
            _30.tasks = Prelude["<$>"](Data_Array.functorArray)(stepTask)(state_1.tasks);
            return _30;
        };
        if (update instanceof Delete) {
            var _34 = {};
            for (var _35 in state_1) {
                if (state_1.hasOwnProperty(_35)) {
                    _34[_35] = state_1[_35];
                };
            };
            _34.tasks = Data_Array.filter(function (t) {
                return Prelude["/="](eqTaskId)(t.id)(update.value0);
            })(state_1.tasks);
            return _34;
        };
        if (update instanceof DeleteComplete) {
            var _37 = {};
            for (var _38 in state_1) {
                if (state_1.hasOwnProperty(_38)) {
                    _37[_38] = state_1[_38];
                };
            };
            _37.tasks = Data_Array.filter(function (t) {
                return !t.completed;
            })(state_1.tasks);
            return _37;
        };
        if (update instanceof Check) {
            var stepTask = function (t) {
                return Prelude["=="](eqTaskId)(t.id)(update.value0) ? (function () {
    var _39 = {};
    for (var _40 in t) {
        if (t.hasOwnProperty(_40)) {
            _39[_40] = t[_40];
        };
    };
    _39.completed = update.value1;
    return _39;
})() : t;
            };
            var _41 = {};
            for (var _42 in state_1) {
                if (state_1.hasOwnProperty(_42)) {
                    _41[_42] = state_1[_42];
                };
            };
            _41.tasks = Prelude["<$>"](Data_Array.functorArray)(stepTask)(state_1.tasks);
            return _41;
        };
        if (update instanceof CheckAll) {
            var stepTask = function (t) {
                var _45 = {};
                for (var _46 in t) {
                    if (t.hasOwnProperty(_46)) {
                        _45[_46] = t[_46];
                    };
                };
                _45.completed = update.value0;
                return _45;
            };
            var _47 = {};
            for (var _48 in state_1) {
                if (state_1.hasOwnProperty(_48)) {
                    _47[_48] = state_1[_48];
                };
            };
            _47.tasks = Prelude["<$>"](Data_Array.functorArray)(stepTask)(state_1.tasks);
            return _47;
        };
        if (update instanceof ChangeVisibility) {
            var _50 = {};
            for (var _51 in state_1) {
                if (state_1.hasOwnProperty(_51)) {
                    _50[_51] = state_1[_51];
                };
            };
            _50.visibility = update.value0;
            return _50;
        };
        throw new Error("Failed pattern match");
    };
};
var emptyState = {
    tasks: [  ], 
    visibility: All.value, 
    field: "", 
    uid: 0
};
var startingState = emptyState;
var state = FRP_Kefir.unsafeGlobalize(FRP_Kefir.streamLikeProperty)(FRP_Kefir.scan(FRP_Kefir.streamLikeStream)(step)(startingState)(updates));
var controls = function (visibility) {
    return function (tasks) {
        var tasksCompleted = Data_Array.length(Data_Array.filter(function (t) {
            return t.completed;
        })(tasks));
        var tasksLeft = Data_Array.length(tasks) - tasksCompleted;
        var item_ = tasksLeft === 1 ? " item" : " items";
        return Data_Html_Elements_Html5.footer([ Data_Html_Attributes_Html5.id_("footer"), Data_Html_Attributes_Html5.hidden(Data_Array["null"](tasks)) ])([ Data_Html_Elements_Html5.span([ Data_Html_Attributes_Html5.id_("todo-count") ])([ Data_Html_Elements_Html5.strong([  ])([ Data_Html_Elements_Html5.text(Prelude.show(Prelude.showNumber)(tasksLeft)) ]), Data_Html_Elements_Html5.text(item_ + " left") ]), Data_Html_Elements_Html5.ul([ Data_Html_Attributes_Html5.id_("filters") ])([ visibilitySwap("#/")(All.value)(visibility), Data_Html_Elements_Html5.text(" "), visibilitySwap("#/active")(Active.value)(visibility), Data_Html_Elements_Html5.text(" "), visibilitySwap("#/completed")(Completed.value)(visibility) ]), Data_Html_Elements_Html5.button([ Data_Html_Attributes_Html5.class_("clear-completed"), Data_Html_Attributes_Html5.id_("clear-completed"), Data_Html_Attributes_Html5.hidden(tasksCompleted === 0), Data_Html_Events.onClick(function (_) {
            return FRP_Kefir.emitAsync(updates)(DeleteComplete.value);
        }) ])([ Data_Html_Elements_Html5.text("Clear completed (" + (Prelude.show(Prelude.showNumber)(tasksCompleted) + ")")) ]) ]);
    };
};
var view = function (state_1) {
    return Data_Html_Elements_Html5.div([ Data_Html_Attributes_Html5.class_("todomvc-wrapper") ])([ Data_Html_Elements_Html5.section([ Data_Html_Attributes_Html5.id_("todoapp") ])([ taskEntry(state_1.field), taskList(state_1.visibility)(state_1.tasks), controls(state_1.visibility)(state_1.tasks) ]), infoFooter ]);
};
var main = function __do() {
    var _0 = Data_Html.createElement(Data_Html_Elements_Html5.text("loading..."))();
    Prelude[">>="](Control_Monad_Eff.bindEff)(Data_Html.getNode(_0))(appendBody)();
    return FRP_Kefir.onValue(FRP_Kefir.streamLikeProperty)(state)(function (v) {
        return Data_Html.patch(view(v))(_0);
    })();
};
module.exports = {
    Active: Active, 
    Add: Add, 
    All: All, 
    ChangeVisibility: ChangeVisibility, 
    Check: Check, 
    CheckAll: CheckAll, 
    Completed: Completed, 
    Delete: Delete, 
    DeleteComplete: DeleteComplete, 
    EditingTask: EditingTask, 
    TaskId: TaskId, 
    UpdateField: UpdateField, 
    UpdateTask: UpdateTask, 
    appendBody: appendBody, 
    controls: controls, 
    emptyState: emptyState, 
    eqTaskId: eqTaskId, 
    eqVisibility: eqVisibility, 
    infoFooter: infoFooter, 
    main: main, 
    newTask: newTask, 
    onEnter: onEnter, 
    showVisibility: showVisibility, 
    startingState: startingState, 
    state: state, 
    step: step, 
    succTaskId: succTaskId, 
    taskEntry: taskEntry, 
    taskList: taskList, 
    todoItem: todoItem, 
    unTaskId: unTaskId, 
    updates: updates, 
    view: view, 
    visibilitySwap: visibilitySwap
};

},{"Control.Monad":8,"Control.Monad.Eff":7,"Data.Array":11,"Data.Foldable":14,"Data.Html":24,"Data.Html.Attributes.Html5":16,"Data.Html.Elements.Html5":18,"Data.Html.Events":20,"Data.String":29,"FRP.Kefir":32,"Prelude":35}],34:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function unsafeIndex(xs) {  return function(n) {    return xs[n];  };};
module.exports = {
    unsafeIndex: unsafeIndex
};

},{"Prelude":35}],35:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Unit = {
    create: function (value) {
        return value;
    }
};
function LT() {

};
LT.value = new LT();
function GT() {

};
GT.value = new GT();
function EQ() {

};
EQ.value = new EQ();
function Semigroupoid($less$less$less) {
    this["<<<"] = $less$less$less;
};
function Category(__superclass_Prelude$dotSemigroupoid_0, id) {
    this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
    this.id = id;
};
function Show(show) {
    this.show = show;
};
function Functor($less$dollar$greater) {
    this["<$>"] = $less$dollar$greater;
};
function Apply($less$times$greater, __superclass_Prelude$dotFunctor_0) {
    this["<*>"] = $less$times$greater;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
};
function Applicative(__superclass_Prelude$dotApply_0, pure) {
    this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    this.pure = pure;
};
function Bind($greater$greater$eq, __superclass_Prelude$dotApply_0) {
    this[">>="] = $greater$greater$eq;
    this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
};
function Monad(__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
    this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
    this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
};
function Num($percent, $times, $plus, $minus, $div, negate) {
    this["%"] = $percent;
    this["*"] = $times;
    this["+"] = $plus;
    this["-"] = $minus;
    this["/"] = $div;
    this.negate = negate;
};
function Eq($div$eq, $eq$eq) {
    this["/="] = $div$eq;
    this["=="] = $eq$eq;
};
function Ord(__superclass_Prelude$dotEq_0, compare) {
    this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
    this.compare = compare;
};
function Bits($dot$amp$dot, $dot$up$dot, $dot$bar$dot, complement, shl, shr, zshr) {
    this[".&."] = $dot$amp$dot;
    this[".^."] = $dot$up$dot;
    this[".|."] = $dot$bar$dot;
    this.complement = complement;
    this.shl = shl;
    this.shr = shr;
    this.zshr = zshr;
};
function BoolLike($amp$amp, not, $bar$bar) {
    this["&&"] = $amp$amp;
    this.not = not;
    this["||"] = $bar$bar;
};
function Semigroup($less$greater) {
    this["<>"] = $less$greater;
};
function cons(e) {  return function(l) {    return [e].concat(l);  };};
function showStringImpl(s) {  return JSON.stringify(s);};
function showNumberImpl(n) {  return n.toString();};
function showArrayImpl(f) {  return function(xs) {    var ss = [];    for (var i = 0, l = xs.length; i < l; i++) {      ss[i] = f(xs[i]);    }    return '[' + ss.join(',') + ']';  };};
function numAdd(n1) {  return function(n2) {    return n1 + n2;  };};
function numSub(n1) {  return function(n2) {    return n1 - n2;  };};
function numMul(n1) {  return function(n2) {    return n1 * n2;  };};
function numDiv(n1) {  return function(n2) {    return n1 / n2;  };};
function numMod(n1) {  return function(n2) {    return n1 % n2;  };};
function numNegate(n) {  return -n;};
function refEq(r1) {  return function(r2) {    return r1 === r2;  };};
function refIneq(r1) {  return function(r2) {    return r1 !== r2;  };};
function eqArrayImpl(f) {  return function(xs) {    return function(ys) {      if (xs.length !== ys.length) return false;      for (var i = 0; i < xs.length; i++) {        if (!f(xs[i])(ys[i])) return false;      }      return true;    };  };};
function unsafeCompareImpl(lt) {  return function(eq) {    return function(gt) {      return function(x) {        return function(y) {          return x < y ? lt : x > y ? gt : eq;        };      };    };  };};
function numShl(n1) {  return function(n2) {    return n1 << n2;  };};
function numShr(n1) {  return function(n2) {    return n1 >> n2;  };};
function numZshr(n1) {  return function(n2) {    return n1 >>> n2;  };};
function numAnd(n1) {  return function(n2) {    return n1 & n2;  };};
function numOr(n1) {  return function(n2) {    return n1 | n2;  };};
function numXor(n1) {  return function(n2) {    return n1 ^ n2;  };};
function numComplement(n) {  return ~n;};
function boolAnd(b1) {  return function(b2) {    return b1 && b2;  };};
function boolOr(b1) {  return function(b2) {    return b1 || b2;  };};
function boolNot(b) {  return !b;};
function concatString(s1) {  return function(s2) {    return s1 + s2;  };};
var $bar$bar = function (dict) {
    return dict["||"];
};
var $greater$greater$eq = function (dict) {
    return dict[">>="];
};
var $eq$eq = function (dict) {
    return dict["=="];
};
var $less$greater = function (dict) {
    return dict["<>"];
};
var $less$less$less = function (dict) {
    return dict["<<<"];
};
var $greater$greater$greater = function (__dict_Semigroupoid_0) {
    return function (f) {
        return function (g) {
            return $less$less$less(__dict_Semigroupoid_0)(g)(f);
        };
    };
};
var $less$times$greater = function (dict) {
    return dict["<*>"];
};
var $less$dollar$greater = function (dict) {
    return dict["<$>"];
};
var $less$hash$greater = function (__dict_Functor_1) {
    return function (fa) {
        return function (f) {
            return $less$dollar$greater(__dict_Functor_1)(f)(fa);
        };
    };
};
var $colon = cons;
var $div$eq = function (dict) {
    return dict["/="];
};
var $div = function (dict) {
    return dict["/"];
};
var $dot$bar$dot = function (dict) {
    return dict[".|."];
};
var $dot$up$dot = function (dict) {
    return dict[".^."];
};
var $dot$amp$dot = function (dict) {
    return dict[".&."];
};
var $minus = function (dict) {
    return dict["-"];
};
var $plus$plus = function (__dict_Semigroup_2) {
    return $less$greater(__dict_Semigroup_2);
};
var $plus = function (dict) {
    return dict["+"];
};
var $times = function (dict) {
    return dict["*"];
};
var $amp$amp = function (dict) {
    return dict["&&"];
};
var $percent = function (dict) {
    return dict["%"];
};
var $dollar = function (f) {
    return function (x) {
        return f(x);
    };
};
var $hash = function (x) {
    return function (f) {
        return f(x);
    };
};
var zshr = function (dict) {
    return dict.zshr;
};
var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
var unit = {};
var shr = function (dict) {
    return dict.shr;
};
var showUnit = new Show(function (_15) {
    return "Unit {}";
});
var showString = new Show(showStringImpl);
var showOrdering = new Show(function (_23) {
    if (_23 instanceof LT) {
        return "LT";
    };
    if (_23 instanceof GT) {
        return "GT";
    };
    if (_23 instanceof EQ) {
        return "EQ";
    };
    throw new Error("Failed pattern match");
});
var showNumber = new Show(showNumberImpl);
var showBoolean = new Show(function (_16) {
    if (_16) {
        return "true";
    };
    if (!_16) {
        return "false";
    };
    throw new Error("Failed pattern match");
});
var show = function (dict) {
    return dict.show;
};
var showArray = function (__dict_Show_3) {
    return new Show(showArrayImpl(show(__dict_Show_3)));
};
var shl = function (dict) {
    return dict.shl;
};
var semigroupoidArr = new Semigroupoid(function (f) {
    return function (g) {
        return function (x) {
            return f(g(x));
        };
    };
});
var semigroupUnit = new Semigroup(function (_30) {
    return function (_31) {
        return {};
    };
});
var semigroupString = new Semigroup(concatString);
var semigroupArr = function (__dict_Semigroup_4) {
    return new Semigroup(function (f) {
        return function (g) {
            return function (x) {
                return $less$greater(__dict_Semigroup_4)(f(x))(g(x));
            };
        };
    });
};
var pure = function (dict) {
    return dict.pure;
};
var $$return = function (__dict_Monad_5) {
    return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
};
var otherwise = true;
var numNumber = new Num(numMod, numMul, numAdd, numSub, numDiv, numNegate);
var not = function (dict) {
    return dict.not;
};
var negate = function (dict) {
    return dict.negate;
};
var liftM1 = function (__dict_Monad_6) {
    return function (f) {
        return function (a) {
            return $greater$greater$eq(__dict_Monad_6["__superclass_Prelude.Bind_1"]())(a)(function (_0) {
                return $$return(__dict_Monad_6)(f(_0));
            });
        };
    };
};
var liftA1 = function (__dict_Applicative_7) {
    return function (f) {
        return function (a) {
            return $less$times$greater(__dict_Applicative_7["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_7)(f))(a);
        };
    };
};
var id = function (dict) {
    return dict.id;
};
var functorArr = new Functor($less$less$less(semigroupoidArr));
var flip = function (f) {
    return function (b) {
        return function (a) {
            return f(a)(b);
        };
    };
};
var eqUnit = new Eq(function (_19) {
    return function (_20) {
        return false;
    };
}, function (_17) {
    return function (_18) {
        return true;
    };
});
var ordUnit = new Ord(function () {
    return eqUnit;
}, function (_24) {
    return function (_25) {
        return EQ.value;
    };
});
var eqString = new Eq(refIneq, refEq);
var ordString = new Ord(function () {
    return eqString;
}, unsafeCompare);
var eqNumber = new Eq(refIneq, refEq);
var ordNumber = new Ord(function () {
    return eqNumber;
}, unsafeCompare);
var eqBoolean = new Eq(refIneq, refEq);
var ordBoolean = new Ord(function () {
    return eqBoolean;
}, function (_26) {
    return function (_27) {
        if (!_26 && !_27) {
            return EQ.value;
        };
        if (!_26 && _27) {
            return LT.value;
        };
        if (_26 && _27) {
            return EQ.value;
        };
        if (_26 && !_27) {
            return GT.value;
        };
        throw new Error("Failed pattern match");
    };
});
var $$const = function (_11) {
    return function (_12) {
        return _11;
    };
};
var $$void = function (__dict_Functor_9) {
    return function (fa) {
        return $less$dollar$greater(__dict_Functor_9)($$const(unit))(fa);
    };
};
var complement = function (dict) {
    return dict.complement;
};
var compare = function (dict) {
    return dict.compare;
};
var $less = function (__dict_Ord_11) {
    return function (a1) {
        return function (a2) {
            var _271 = compare(__dict_Ord_11)(a1)(a2);
            if (_271 instanceof LT) {
                return true;
            };
            return false;
        };
    };
};
var $less$eq = function (__dict_Ord_12) {
    return function (a1) {
        return function (a2) {
            var _272 = compare(__dict_Ord_12)(a1)(a2);
            if (_272 instanceof GT) {
                return false;
            };
            return true;
        };
    };
};
var $greater = function (__dict_Ord_13) {
    return function (a1) {
        return function (a2) {
            var _273 = compare(__dict_Ord_13)(a1)(a2);
            if (_273 instanceof GT) {
                return true;
            };
            return false;
        };
    };
};
var $greater$eq = function (__dict_Ord_14) {
    return function (a1) {
        return function (a2) {
            var _274 = compare(__dict_Ord_14)(a1)(a2);
            if (_274 instanceof LT) {
                return false;
            };
            return true;
        };
    };
};
var categoryArr = new Category(function () {
    return semigroupoidArr;
}, function (x) {
    return x;
});
var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
var eqArray = function (__dict_Eq_8) {
    return new Eq(function (xs) {
        return function (ys) {
            return not(boolLikeBoolean)($eq$eq(eqArray(__dict_Eq_8))(xs)(ys));
        };
    }, function (xs) {
        return function (ys) {
            return eqArrayImpl($eq$eq(__dict_Eq_8))(xs)(ys);
        };
    });
};
var ordArray = function (__dict_Ord_10) {
    return new Ord(function () {
        return eqArray(__dict_Ord_10["__superclass_Prelude.Eq_0"]());
    }, function (_28) {
        return function (_29) {
            if (_28.length === 0 && _29.length === 0) {
                return EQ.value;
            };
            if (_28.length === 0) {
                return LT.value;
            };
            if (_29.length === 0) {
                return GT.value;
            };
            if (_28.length >= 1) {
                var _281 = _28.slice(1);
                if (_29.length >= 1) {
                    var _279 = _29.slice(1);
                    var _277 = compare(__dict_Ord_10)(_28[0])(_29[0]);
                    if (_277 instanceof EQ) {
                        return compare(ordArray(__dict_Ord_10))(_281)(_279);
                    };
                    return _277;
                };
            };
            throw new Error("Failed pattern match");
        };
    });
};
var eqOrdering = new Eq(function (x) {
    return function (y) {
        return not(boolLikeBoolean)($eq$eq(eqOrdering)(x)(y));
    };
}, function (_21) {
    return function (_22) {
        if (_21 instanceof LT && _22 instanceof LT) {
            return true;
        };
        if (_21 instanceof GT && _22 instanceof GT) {
            return true;
        };
        if (_21 instanceof EQ && _22 instanceof EQ) {
            return true;
        };
        return false;
    };
});
var bitsNumber = new Bits(numAnd, numXor, numOr, numComplement, numShl, numShr, numZshr);
var asTypeOf = function (_13) {
    return function (_14) {
        return _13;
    };
};
var applyArr = new Apply(function (f) {
    return function (g) {
        return function (x) {
            return f(x)(g(x));
        };
    };
}, function () {
    return functorArr;
});
var bindArr = new Bind(function (m) {
    return function (f) {
        return function (x) {
            return f(m(x))(x);
        };
    };
}, function () {
    return applyArr;
});
var applicativeArr = new Applicative(function () {
    return applyArr;
}, $$const);
var monadArr = new Monad(function () {
    return applicativeArr;
}, function () {
    return bindArr;
});
var ap = function (__dict_Monad_15) {
    return function (f) {
        return function (a) {
            return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                    return $$return(__dict_Monad_15)(_2(_1));
                });
            });
        };
    };
};
module.exports = {
    "#": $hash, 
    "$": $dollar, 
    "%": $percent, 
    "&&": $amp$amp, 
    "*": $times, 
    "+": $plus, 
    "++": $plus$plus, 
    "-": $minus, 
    ".&.": $dot$amp$dot, 
    ".^.": $dot$up$dot, 
    ".|.": $dot$bar$dot, 
    "/": $div, 
    "/=": $div$eq, 
    ":": $colon, 
    "<": $less, 
    "<#>": $less$hash$greater, 
    "<$>": $less$dollar$greater, 
    "<*>": $less$times$greater, 
    "<<<": $less$less$less, 
    "<=": $less$eq, 
    "<>": $less$greater, 
    "==": $eq$eq, 
    ">": $greater, 
    ">=": $greater$eq, 
    ">>=": $greater$greater$eq, 
    ">>>": $greater$greater$greater, 
    Applicative: Applicative, 
    Apply: Apply, 
    Bind: Bind, 
    Bits: Bits, 
    BoolLike: BoolLike, 
    Category: Category, 
    EQ: EQ, 
    Eq: Eq, 
    Functor: Functor, 
    GT: GT, 
    LT: LT, 
    Monad: Monad, 
    Num: Num, 
    Ord: Ord, 
    Semigroup: Semigroup, 
    Semigroupoid: Semigroupoid, 
    Show: Show, 
    Unit: Unit, 
    ap: ap, 
    applicativeArr: applicativeArr, 
    applyArr: applyArr, 
    asTypeOf: asTypeOf, 
    bindArr: bindArr, 
    bitsNumber: bitsNumber, 
    boolLikeBoolean: boolLikeBoolean, 
    categoryArr: categoryArr, 
    compare: compare, 
    complement: complement, 
    cons: cons, 
    "const": $$const, 
    eqArray: eqArray, 
    eqBoolean: eqBoolean, 
    eqNumber: eqNumber, 
    eqOrdering: eqOrdering, 
    eqString: eqString, 
    eqUnit: eqUnit, 
    flip: flip, 
    functorArr: functorArr, 
    id: id, 
    liftA1: liftA1, 
    liftM1: liftM1, 
    monadArr: monadArr, 
    negate: negate, 
    not: not, 
    numNumber: numNumber, 
    ordArray: ordArray, 
    ordBoolean: ordBoolean, 
    ordNumber: ordNumber, 
    ordString: ordString, 
    ordUnit: ordUnit, 
    otherwise: otherwise, 
    pure: pure, 
    refEq: refEq, 
    refIneq: refIneq, 
    "return": $$return, 
    semigroupArr: semigroupArr, 
    semigroupString: semigroupString, 
    semigroupUnit: semigroupUnit, 
    semigroupoidArr: semigroupoidArr, 
    shl: shl, 
    show: show, 
    showArray: showArray, 
    showBoolean: showBoolean, 
    showNumber: showNumber, 
    showOrdering: showOrdering, 
    showString: showString, 
    showUnit: showUnit, 
    shr: shr, 
    unit: unit, 
    "void": $$void, 
    zshr: zshr, 
    "||": $bar$bar
};

},{}],36:[function(require,module,exports){
require('Main').main();

},{"Main":33}]},{},[36]);
